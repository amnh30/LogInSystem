
LogInSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  00002b68  00002bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000225c  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ee9  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  0000622d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00008639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  000099b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ab88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000b03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ba09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 57 13 	call	0x26ae	; 0x26ae <main>
      7a:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 eb       	ldi	r26, 0xB9	; 185
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 eb       	ldi	r24, 0xB9	; 185
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	69 eb       	ldi	r22, 0xB9	; 185
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	ef 53       	subi	r30, 0x3F	; 63
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <MDIO_IntialPins>:
#include "STD_TYPES.h"

/* Set Intial Direction Function */

void MDIO_IntialPins(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62

	PRIVATE_DDRA_REG = PRIVATE_CONC(MDIO_PA7_A_DIR,
     df0:	ea e3       	ldi	r30, 0x3A	; 58
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	80 83       	st	Z, r24
									MDIO_PA3_A_DIR,
									MDIO_PA2_A_DIR,
									MDIO_PA1_A_DIR,
									MDIO_PA0_A_DIR);

	PRIVATE_DDRB_REG = PRIVATE_CONC(MDIO_PA7_B_DIR,
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	80 83       	st	Z, r24
									MDIO_PA4_B_DIR,
									MDIO_PA3_B_DIR,
									MDIO_PA2_B_DIR,
									MDIO_PA1_B_DIR,
									MDIO_PA0_B_DIR);
	PRIVATE_DDRC_REG = PRIVATE_CONC(MDIO_PA7_C_DIR,
     e00:	e4 e3       	ldi	r30, 0x34	; 52
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	8f e0       	ldi	r24, 0x0F	; 15
     e06:	80 83       	st	Z, r24
									MDIO_PA4_C_DIR,
									MDIO_PA3_C_DIR,
									MDIO_PA2_C_DIR,
									MDIO_PA1_C_DIR,
									MDIO_PA0_C_DIR);
	PRIVATE_DDRD_REG = PRIVATE_CONC(MDIO_PA7_D_DIR,
     e08:	e1 e3       	ldi	r30, 0x31	; 49
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	80 83       	st	Z, r24
									MDIO_PA3_D_DIR,
									MDIO_PA2_D_DIR,
									MDIO_PA1_D_DIR,
									MDIO_PA0_D_DIR);

	PRIVATE_PORTA_REG = PRIVATE_CONC(MDIO_PA7_A_INIT_VALUE,
     e10:	eb e3       	ldi	r30, 0x3B	; 59
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	10 82       	st	Z, r1
									 MDIO_PA3_A_INIT_VALUE,
									 MDIO_PA2_A_INIT_VALUE,
									 MDIO_PA1_A_INIT_VALUE,
									 MDIO_PA0_A_INIT_VALUE);

	PRIVATE_PORTB_REG = PRIVATE_CONC(MDIO_PA7_B_INIT_VALUE,
     e16:	e8 e3       	ldi	r30, 0x38	; 56
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	10 82       	st	Z, r1
									 MDIO_PA3_B_INIT_VALUE,
									 MDIO_PA2_B_INIT_VALUE,
									 MDIO_PA1_B_INIT_VALUE,
									 MDIO_PA0_B_INIT_VALUE);

	PRIVATE_PORTC_REG = PRIVATE_CONC(MDIO_PA7_C_INIT_VALUE,
     e1c:	e5 e3       	ldi	r30, 0x35	; 53
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	80 83       	st	Z, r24
									 MDIO_PA3_C_INIT_VALUE,
									 MDIO_PA2_C_INIT_VALUE,
									 MDIO_PA1_C_INIT_VALUE,
									 MDIO_PA0_C_INIT_VALUE);

	PRIVATE_PORTD_REG = PRIVATE_CONC(MDIO_PA7_D_INIT_VALUE,
     e24:	e2 e3       	ldi	r30, 0x32	; 50
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	10 82       	st	Z, r1
									 MDIO_PA4_D_INIT_VALUE,
									 MDIO_PA3_D_INIT_VALUE,
									 MDIO_PA2_D_INIT_VALUE,
									 MDIO_PA1_D_INIT_VALUE,
									 MDIO_PA0_D_INIT_VALUE);
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <MDIO_u8SetPinDirection>:

/* Set Pin Direction */
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirec)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <MDIO_u8SetPinDirection+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <MDIO_u8SetPinDirection+0x8>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <MDIO_u8SetPinDirection+0xa>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	6b 83       	std	Y+3, r22	; 0x03
     e42:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorSate = STD_TYPE_OK;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PortId <= MDIO_PORTD && Copy_u8PinDirec <= MDIO_INPUT_PULLED_UP)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <MDIO_u8SetPinDirection+0x20>
     e4e:	91 c1       	rjmp	.+802    	; 0x1172 <MDIO_u8SetPinDirection+0x342>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	84 30       	cpi	r24, 0x04	; 4
     e54:	08 f0       	brcs	.+2      	; 0xe58 <MDIO_u8SetPinDirection+0x28>
     e56:	8d c1       	rjmp	.+794    	; 0x1172 <MDIO_u8SetPinDirection+0x342>
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <MDIO_u8SetPinDirection+0x30>
     e5e:	89 c1       	rjmp	.+786    	; 0x1172 <MDIO_u8SetPinDirection+0x342>
	{
		/* Select Pin Direction */
		switch (Copy_u8PortId)
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3e 83       	std	Y+6, r19	; 0x06
     e68:	2d 83       	std	Y+5, r18	; 0x05
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <MDIO_u8SetPinDirection+0x46>
     e74:	71 c0       	rjmp	.+226    	; 0xf58 <MDIO_u8SetPinDirection+0x128>
     e76:	2d 81       	ldd	r18, Y+5	; 0x05
     e78:	3e 81       	ldd	r19, Y+6	; 0x06
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	2c f4       	brge	.+10     	; 0xe8a <MDIO_u8SetPinDirection+0x5a>
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	71 f0       	breq	.+28     	; 0xea4 <MDIO_u8SetPinDirection+0x74>
     e88:	75 c1       	rjmp	.+746    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
     e8a:	2d 81       	ldd	r18, Y+5	; 0x05
     e8c:	3e 81       	ldd	r19, Y+6	; 0x06
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <MDIO_u8SetPinDirection+0x66>
     e94:	bb c0       	rjmp	.+374    	; 0x100c <MDIO_u8SetPinDirection+0x1dc>
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <MDIO_u8SetPinDirection+0x72>
     ea0:	0f c1       	rjmp	.+542    	; 0x10c0 <MDIO_u8SetPinDirection+0x290>
     ea2:	68 c1       	rjmp	.+720    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	88 23       	and	r24, r24
     ea8:	a1 f4       	brne	.+40     	; 0xed2 <MDIO_u8SetPinDirection+0xa2>
			{
				/*Set DDRA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e3       	ldi	r30, 0x3A	; 58
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <MDIO_u8SetPinDirection+0x98>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <MDIO_u8SetPinDirection+0x94>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	51 c1       	rjmp	.+674    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	a9 f4       	brne	.+42     	; 0xf02 <MDIO_u8SetPinDirection+0xd2>
			{
				/*Clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     ed8:	aa e3       	ldi	r26, 0x3A	; 58
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_u8SetPinDirection+0xc6>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_u8SetPinDirection+0xc2>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	39 c1       	rjmp	.+626    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	09 f0       	breq	.+2      	; 0xf0a <MDIO_u8SetPinDirection+0xda>
     f08:	35 c1       	rjmp	.+618    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     f0a:	aa e3       	ldi	r26, 0x3A	; 58
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ea e3       	ldi	r30, 0x3A	; 58
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <MDIO_u8SetPinDirection+0xf6>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <MDIO_u8SetPinDirection+0xf2>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
				/*Set PORTA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
     f30:	ab e3       	ldi	r26, 0x3B	; 59
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	eb e3       	ldi	r30, 0x3B	; 59
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <MDIO_u8SetPinDirection+0x11e>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <MDIO_u8SetPinDirection+0x11a>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	0e c1       	rjmp	.+540    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	88 23       	and	r24, r24
     f5c:	a1 f4       	brne	.+40     	; 0xf86 <MDIO_u8SetPinDirection+0x156>
			{
				/*Set DDRB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     f5e:	a7 e3       	ldi	r26, 0x37	; 55
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e3       	ldi	r30, 0x37	; 55
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <MDIO_u8SetPinDirection+0x14c>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <MDIO_u8SetPinDirection+0x148>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	f7 c0       	rjmp	.+494    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	a9 f4       	brne	.+42     	; 0xfb6 <MDIO_u8SetPinDirection+0x186>
			{
				/*Clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     f8c:	a7 e3       	ldi	r26, 0x37	; 55
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <MDIO_u8SetPinDirection+0x17a>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <MDIO_u8SetPinDirection+0x176>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	df c0       	rjmp	.+446    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	09 f0       	breq	.+2      	; 0xfbe <MDIO_u8SetPinDirection+0x18e>
     fbc:	db c0       	rjmp	.+438    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     fbe:	a7 e3       	ldi	r26, 0x37	; 55
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e7 e3       	ldi	r30, 0x37	; 55
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <MDIO_u8SetPinDirection+0x1aa>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <MDIO_u8SetPinDirection+0x1a6>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
				/*Set PORTB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
     fe4:	a8 e3       	ldi	r26, 0x38	; 56
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 e3       	ldi	r30, 0x38	; 56
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <MDIO_u8SetPinDirection+0x1d2>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <MDIO_u8SetPinDirection+0x1ce>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	b4 c0       	rjmp	.+360    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	88 23       	and	r24, r24
    1010:	a1 f4       	brne	.+40     	; 0x103a <MDIO_u8SetPinDirection+0x20a>
			{
				/*Set DDRC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
    1012:	a4 e3       	ldi	r26, 0x34	; 52
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e4 e3       	ldi	r30, 0x34	; 52
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <MDIO_u8SetPinDirection+0x200>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <MDIO_u8SetPinDirection+0x1fc>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	9d c0       	rjmp	.+314    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	a9 f4       	brne	.+42     	; 0x106a <MDIO_u8SetPinDirection+0x23a>
			{
				/*Clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <MDIO_u8SetPinDirection+0x22e>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <MDIO_u8SetPinDirection+0x22a>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	85 c0       	rjmp	.+266    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	09 f0       	breq	.+2      	; 0x1072 <MDIO_u8SetPinDirection+0x242>
    1070:	81 c0       	rjmp	.+258    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
    1072:	a4 e3       	ldi	r26, 0x34	; 52
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e4 e3       	ldi	r30, 0x34	; 52
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <MDIO_u8SetPinDirection+0x25e>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	2a 95       	dec	r18
    1090:	e2 f7       	brpl	.-8      	; 0x108a <MDIO_u8SetPinDirection+0x25a>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
				/*Set PORTC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    1098:	a5 e3       	ldi	r26, 0x35	; 53
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e3       	ldi	r30, 0x35	; 53
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <MDIO_u8SetPinDirection+0x286>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <MDIO_u8SetPinDirection+0x282>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	5a c0       	rjmp	.+180    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	88 23       	and	r24, r24
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <MDIO_u8SetPinDirection+0x2be>
			{
				/*Set DDRD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
    10c6:	a1 e3       	ldi	r26, 0x31	; 49
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e1 e3       	ldi	r30, 0x31	; 49
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <MDIO_u8SetPinDirection+0x2b4>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <MDIO_u8SetPinDirection+0x2b0>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	43 c0       	rjmp	.+134    	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	a9 f4       	brne	.+42     	; 0x111e <MDIO_u8SetPinDirection+0x2ee>
			{
				/*Clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
    10f4:	a1 e3       	ldi	r26, 0x31	; 49
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e1 e3       	ldi	r30, 0x31	; 49
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <MDIO_u8SetPinDirection+0x2e2>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <MDIO_u8SetPinDirection+0x2de>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	2b c0       	rjmp	.+86     	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	41 f5       	brne	.+80     	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
    1124:	a1 e3       	ldi	r26, 0x31	; 49
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e1 e3       	ldi	r30, 0x31	; 49
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <MDIO_u8SetPinDirection+0x310>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	2a 95       	dec	r18
    1142:	e2 f7       	brpl	.-8      	; 0x113c <MDIO_u8SetPinDirection+0x30c>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
				/*Set PORTD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    114a:	a2 e3       	ldi	r26, 0x32	; 50
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <MDIO_u8SetPinDirection+0x338>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <MDIO_u8SetPinDirection+0x334>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <MDIO_u8SetPinDirection+0x344>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    1172:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	26 96       	adiw	r28, 0x06	; 6
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <MDIO_u8SetPortDirection>:

/* Set Port Direction */
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirec)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <MDIO_u8SetPortDirection+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <MDIO_u8SetPortDirection+0x8>
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = STD_TYPE_OK;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && (Copy_u8PortDirec <= MDIO_INPUT_PULLED_UP))
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <MDIO_u8SetPortDirection+0x1e>
    11a4:	90 c0       	rjmp	.+288    	; 0x12c6 <MDIO_u8SetPortDirection+0x13e>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <MDIO_u8SetPortDirection+0x26>
    11ac:	8c c0       	rjmp	.+280    	; 0x12c6 <MDIO_u8SetPortDirection+0x13e>
	{
		switch (Copy_u8PortId)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3d 83       	std	Y+5, r19	; 0x05
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	89 f1       	breq	.+98     	; 0x1224 <MDIO_u8SetPortDirection+0x9c>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <MDIO_u8SetPortDirection+0x4e>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f0       	breq	.+26     	; 0x11ee <MDIO_u8SetPortDirection+0x66>
    11d4:	76 c0       	rjmp	.+236    	; 0x12c2 <MDIO_u8SetPortDirection+0x13a>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	e9 f1       	breq	.+122    	; 0x125a <MDIO_u8SetPortDirection+0xd2>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <MDIO_u8SetPortDirection+0x64>
    11ea:	51 c0       	rjmp	.+162    	; 0x128e <MDIO_u8SetPortDirection+0x106>
    11ec:	6a c0       	rjmp	.+212    	; 0x12c2 <MDIO_u8SetPortDirection+0x13a>
		{
		case MDIO_PORTA:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 23       	and	r24, r24
    11f2:	29 f4       	brne	.+10     	; 0x11fe <MDIO_u8SetPortDirection+0x76>
			{
				/* Set all Port A pins as Output */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_OUTPUT;
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	80 83       	st	Z, r24
    11fc:	65 c0       	rjmp	.+202    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	21 f4       	brne	.+8      	; 0x120c <MDIO_u8SetPortDirection+0x84>
			{
				/* Set all Port A pins as Input (Floating) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	10 82       	st	Z, r1
    120a:	5e c0       	rjmp	.+188    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	09 f0       	breq	.+2      	; 0x1214 <MDIO_u8SetPortDirection+0x8c>
    1212:	5a c0       	rjmp	.+180    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port A pins as Input (Pulled-Up) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port A pins */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_OUTPUT;
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	80 83       	st	Z, r24
    1222:	52 c0       	rjmp	.+164    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 23       	and	r24, r24
    1228:	29 f4       	brne	.+10     	; 0x1234 <MDIO_u8SetPortDirection+0xac>
			{
				/* Set all Port B pins as Output */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_OUTPUT;
    122a:	e7 e3       	ldi	r30, 0x37	; 55
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	80 83       	st	Z, r24
    1232:	4a c0       	rjmp	.+148    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	21 f4       	brne	.+8      	; 0x1242 <MDIO_u8SetPortDirection+0xba>
			{
				/* Set all Port B pins as Input (Floating) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    123a:	e7 e3       	ldi	r30, 0x37	; 55
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
    1240:	43 c0       	rjmp	.+134    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	09 f0       	breq	.+2      	; 0x124a <MDIO_u8SetPortDirection+0xc2>
    1248:	3f c0       	rjmp	.+126    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port B pins as Input (Pulled-Up) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port B pins */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_OUTPUT;
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	80 83       	st	Z, r24
    1258:	37 c0       	rjmp	.+110    	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	88 23       	and	r24, r24
    125e:	29 f4       	brne	.+10     	; 0x126a <MDIO_u8SetPortDirection+0xe2>
			{
				/* Set all Port C pins as Output */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1260:	e4 e3       	ldi	r30, 0x34	; 52
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	80 83       	st	Z, r24
    1268:	2f c0       	rjmp	.+94     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	21 f4       	brne	.+8      	; 0x1278 <MDIO_u8SetPortDirection+0xf0>
			{
				/* Set all Port C pins as Input (Floating) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1270:	e4 e3       	ldi	r30, 0x34	; 52
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	10 82       	st	Z, r1
    1276:	28 c0       	rjmp	.+80     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	29 f5       	brne	.+74     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port C pins as Input (Pulled-Up) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    127e:	e4 e3       	ldi	r30, 0x34	; 52
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port C pins */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	80 83       	st	Z, r24
    128c:	1d c0       	rjmp	.+58     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 23       	and	r24, r24
    1292:	29 f4       	brne	.+10     	; 0x129e <MDIO_u8SetPortDirection+0x116>
			{
				/* Set all Port D pins as Output */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_OUTPUT;
    1294:	e1 e3       	ldi	r30, 0x31	; 49
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	80 83       	st	Z, r24
    129c:	15 c0       	rjmp	.+42     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	21 f4       	brne	.+8      	; 0x12ac <MDIO_u8SetPortDirection+0x124>
			{
				/* Set all Port D pins as Input (Floating) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	10 82       	st	Z, r1
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	59 f4       	brne	.+22     	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port D pins as Input (Pulled-Up) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    12b2:	e1 e3       	ldi	r30, 0x31	; 49
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port D pins */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_OUTPUT;
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	80 83       	st	Z, r24
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <MDIO_u8SetPortDirection+0x140>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <MDIO_u8SetPinValue>:
/* Set Pin Value */
u8 MDIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <MDIO_u8SetPinValue+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <MDIO_u8SetPinValue+0x8>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <MDIO_u8SetPinValue+0xa>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	6b 83       	std	Y+3, r22	; 0x03
    12ec:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PinValue <= MDIO_HIGH)
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <MDIO_u8SetPinValue+0x20>
    12f8:	eb c0       	rjmp	.+470    	; 0x14d0 <MDIO_u8SetPinValue+0x1f6>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 30       	cpi	r24, 0x08	; 8
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <MDIO_u8SetPinValue+0x28>
    1300:	e7 c0       	rjmp	.+462    	; 0x14d0 <MDIO_u8SetPinValue+0x1f6>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	08 f0       	brcs	.+2      	; 0x130a <MDIO_u8SetPinValue+0x30>
    1308:	e3 c0       	rjmp	.+454    	; 0x14d0 <MDIO_u8SetPinValue+0x1f6>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3e 83       	std	Y+6, r19	; 0x06
    1312:	2d 83       	std	Y+5, r18	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <MDIO_u8SetPinValue+0x46>
    131e:	47 c0       	rjmp	.+142    	; 0x13ae <MDIO_u8SetPinValue+0xd4>
    1320:	2d 81       	ldd	r18, Y+5	; 0x05
    1322:	3e 81       	ldd	r19, Y+6	; 0x06
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <MDIO_u8SetPinValue+0x5a>
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	71 f0       	breq	.+28     	; 0x134e <MDIO_u8SetPinValue+0x74>
    1332:	cc c0       	rjmp	.+408    	; 0x14cc <MDIO_u8SetPinValue+0x1f2>
    1334:	2d 81       	ldd	r18, Y+5	; 0x05
    1336:	3e 81       	ldd	r19, Y+6	; 0x06
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <MDIO_u8SetPinValue+0x66>
    133e:	67 c0       	rjmp	.+206    	; 0x140e <MDIO_u8SetPinValue+0x134>
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <MDIO_u8SetPinValue+0x72>
    134a:	91 c0       	rjmp	.+290    	; 0x146e <MDIO_u8SetPinValue+0x194>
    134c:	bf c0       	rjmp	.+382    	; 0x14cc <MDIO_u8SetPinValue+0x1f2>
		{
		case MDIO_PORTA:
			if (Copy_u8PinValue == MDIO_HIGH)
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <MDIO_u8SetPinValue+0xa2>
			{
				/* Set PORTA Pin in PORTA Reg */
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <MDIO_u8SetPinValue+0x98>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <MDIO_u8SetPinValue+0x94>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	ab c0       	rjmp	.+342    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	88 23       	and	r24, r24
    1380:	09 f0       	breq	.+2      	; 0x1384 <MDIO_u8SetPinValue+0xaa>
    1382:	a7 c0       	rjmp	.+334    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTA Pin in PORTA Reg */
				CLEAR_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <MDIO_u8SetPinValue+0xc8>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <MDIO_u8SetPinValue+0xc4>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	92 c0       	rjmp	.+292    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinValue == MDIO_HIGH)
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a1 f4       	brne	.+40     	; 0x13dc <MDIO_u8SetPinValue+0x102>
			{
				/* Set PORTB Pin in PORTB Reg */
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    13b4:	a8 e3       	ldi	r26, 0x38	; 56
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <MDIO_u8SetPinValue+0xf8>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <MDIO_u8SetPinValue+0xf4>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	7b c0       	rjmp	.+246    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <MDIO_u8SetPinValue+0x10a>
    13e2:	77 c0       	rjmp	.+238    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTB Pin in PORTB Reg */
				CLEAR_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    13e4:	a8 e3       	ldi	r26, 0x38	; 56
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e8 e3       	ldi	r30, 0x38	; 56
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <MDIO_u8SetPinValue+0x128>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <MDIO_u8SetPinValue+0x124>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	62 c0       	rjmp	.+196    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinValue == MDIO_HIGH)
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	a1 f4       	brne	.+40     	; 0x143c <MDIO_u8SetPinValue+0x162>
			{
				/* Set PORTC Pin in PORTC Reg */
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    1414:	a5 e3       	ldi	r26, 0x35	; 53
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e3       	ldi	r30, 0x35	; 53
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <MDIO_u8SetPinValue+0x158>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <MDIO_u8SetPinValue+0x154>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	4b c0       	rjmp	.+150    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	88 23       	and	r24, r24
    1440:	09 f0       	breq	.+2      	; 0x1444 <MDIO_u8SetPinValue+0x16a>
    1442:	47 c0       	rjmp	.+142    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTC Pin in PORTC Reg */
				CLEAR_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    1444:	a5 e3       	ldi	r26, 0x35	; 53
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e3       	ldi	r30, 0x35	; 53
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <MDIO_u8SetPinValue+0x188>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <MDIO_u8SetPinValue+0x184>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	32 c0       	rjmp	.+100    	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinValue == MDIO_HIGH)
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	a1 f4       	brne	.+40     	; 0x149c <MDIO_u8SetPinValue+0x1c2>
			{
				/* Set PORTD Pin in PORTD Reg */
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    1474:	a2 e3       	ldi	r26, 0x32	; 50
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <MDIO_u8SetPinValue+0x1b8>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <MDIO_u8SetPinValue+0x1b4>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	1b c0       	rjmp	.+54     	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	88 23       	and	r24, r24
    14a0:	c1 f4       	brne	.+48     	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTD Pin in PORTD Reg */
				CLEAR_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    14a2:	a2 e3       	ldi	r26, 0x32	; 50
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e2 e3       	ldi	r30, 0x32	; 50
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <MDIO_u8SetPinValue+0x1e6>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <MDIO_u8SetPinValue+0x1e2>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <MDIO_u8SetPinValue+0x1f8>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	26 96       	adiw	r28, 0x06	; 6
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <MDIO_u8SetPortValue>:

/* Set Port Value */
u8 MDIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <MDIO_u8SetPortValue+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <MDIO_u8SetPortValue+0x8>
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= MDIO_PORTD)
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	98 f5       	brcc	.+102    	; 0x1568 <MDIO_u8SetPortValue+0x82>
	{
		switch (Copy_u8PortId)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	d1 f0       	breq	.+52     	; 0x154a <MDIO_u8SetPortValue+0x64>
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <MDIO_u8SetPortValue+0x44>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <MDIO_u8SetPortValue+0x5a>
    1528:	20 c0       	rjmp	.+64     	; 0x156a <MDIO_u8SetPortValue+0x84>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <MDIO_u8SetPortValue+0x6e>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <MDIO_u8SetPortValue+0x78>
    153e:	15 c0       	rjmp	.+42     	; 0x156a <MDIO_u8SetPortValue+0x84>
		{
		case MDIO_PORTA: PRIVATE_PORTA_REG = Copy_u8PortValue; break;
    1540:	eb e3       	ldi	r30, 0x3B	; 59
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	80 83       	st	Z, r24
    1548:	10 c0       	rjmp	.+32     	; 0x156a <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTB: PRIVATE_PORTB_REG = Copy_u8PortValue; break;
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	80 83       	st	Z, r24
    1552:	0b c0       	rjmp	.+22     	; 0x156a <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTC: PRIVATE_PORTC_REG = Copy_u8PortValue; break;
    1554:	e5 e3       	ldi	r30, 0x35	; 53
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	80 83       	st	Z, r24
    155c:	06 c0       	rjmp	.+12     	; 0x156a <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTD: PRIVATE_PORTD_REG = Copy_u8PortValue; break;
    155e:	e2 e3       	ldi	r30, 0x32	; 50
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	80 83       	st	Z, r24
    1566:	01 c0       	rjmp	.+2      	; 0x156a <MDIO_u8SetPortValue+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <MDIO_u8GetPinValue>:

/* Get Pin Value */
u8 MDIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	27 97       	sbiw	r28, 0x07	; 7
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	6b 83       	std	Y+3, r22	; 0x03
    1594:	5d 83       	std	Y+5, r21	; 0x05
    1596:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Initialize error state to OK
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01

	// Check if the port ID, pin ID are within valid ranges and pointer is not NULL
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_pu8ReturnedPinValue != POINTER_NULL)
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <MDIO_u8GetPinValue+0x28>
    15a2:	7c c0       	rjmp	.+248    	; 0x169c <MDIO_u8GetPinValue+0x120>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <MDIO_u8GetPinValue+0x30>
    15aa:	78 c0       	rjmp	.+240    	; 0x169c <MDIO_u8GetPinValue+0x120>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <MDIO_u8GetPinValue+0x3a>
    15b4:	73 c0       	rjmp	.+230    	; 0x169c <MDIO_u8GetPinValue+0x120>
	{
		// Retrieve the value from the correct port
		switch (Copy_u8PortId)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3f 83       	std	Y+7, r19	; 0x07
    15be:	2e 83       	std	Y+6, r18	; 0x06
    15c0:	4e 81       	ldd	r20, Y+6	; 0x06
    15c2:	5f 81       	ldd	r21, Y+7	; 0x07
    15c4:	41 30       	cpi	r20, 0x01	; 1
    15c6:	51 05       	cpc	r21, r1
    15c8:	59 f1       	breq	.+86     	; 0x1620 <MDIO_u8GetPinValue+0xa4>
    15ca:	8e 81       	ldd	r24, Y+6	; 0x06
    15cc:	9f 81       	ldd	r25, Y+7	; 0x07
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	34 f4       	brge	.+12     	; 0x15e0 <MDIO_u8GetPinValue+0x64>
    15d4:	2e 81       	ldd	r18, Y+6	; 0x06
    15d6:	3f 81       	ldd	r19, Y+7	; 0x07
    15d8:	21 15       	cp	r18, r1
    15da:	31 05       	cpc	r19, r1
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <MDIO_u8GetPinValue+0x7c>
    15de:	5c c0       	rjmp	.+184    	; 0x1698 <MDIO_u8GetPinValue+0x11c>
    15e0:	4e 81       	ldd	r20, Y+6	; 0x06
    15e2:	5f 81       	ldd	r21, Y+7	; 0x07
    15e4:	42 30       	cpi	r20, 0x02	; 2
    15e6:	51 05       	cpc	r21, r1
    15e8:	79 f1       	breq	.+94     	; 0x1648 <MDIO_u8GetPinValue+0xcc>
    15ea:	8e 81       	ldd	r24, Y+6	; 0x06
    15ec:	9f 81       	ldd	r25, Y+7	; 0x07
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <MDIO_u8GetPinValue+0x7a>
    15f4:	3d c0       	rjmp	.+122    	; 0x1670 <MDIO_u8GetPinValue+0xf4>
    15f6:	50 c0       	rjmp	.+160    	; 0x1698 <MDIO_u8GetPinValue+0x11c>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINA_REG, Copy_u8PinId); // Get specific pin value from PORTA
    15f8:	e9 e3       	ldi	r30, 0x39	; 57
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <MDIO_u8GetPinValue+0x94>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <MDIO_u8GetPinValue+0x90>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	ec 81       	ldd	r30, Y+4	; 0x04
    161a:	fd 81       	ldd	r31, Y+5	; 0x05
    161c:	80 83       	st	Z, r24
    161e:	3f c0       	rjmp	.+126    	; 0x169e <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINB_REG, Copy_u8PinId); // Get specific pin value from PORTB
    1620:	e6 e3       	ldi	r30, 0x36	; 54
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a9 01       	movw	r20, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <MDIO_u8GetPinValue+0xbc>
    1634:	55 95       	asr	r21
    1636:	47 95       	ror	r20
    1638:	8a 95       	dec	r24
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <MDIO_u8GetPinValue+0xb8>
    163c:	ca 01       	movw	r24, r20
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	ec 81       	ldd	r30, Y+4	; 0x04
    1642:	fd 81       	ldd	r31, Y+5	; 0x05
    1644:	80 83       	st	Z, r24
    1646:	2b c0       	rjmp	.+86     	; 0x169e <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINC_REG, Copy_u8PinId); // Get specific pin value from PORTC
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a9 01       	movw	r20, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <MDIO_u8GetPinValue+0xe4>
    165c:	55 95       	asr	r21
    165e:	47 95       	ror	r20
    1660:	8a 95       	dec	r24
    1662:	e2 f7       	brpl	.-8      	; 0x165c <MDIO_u8GetPinValue+0xe0>
    1664:	ca 01       	movw	r24, r20
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	ec 81       	ldd	r30, Y+4	; 0x04
    166a:	fd 81       	ldd	r31, Y+5	; 0x05
    166c:	80 83       	st	Z, r24
    166e:	17 c0       	rjmp	.+46     	; 0x169e <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PIND_REG, Copy_u8PinId); // Get specific pin value from PORTD
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <MDIO_u8GetPinValue+0x10c>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <MDIO_u8GetPinValue+0x108>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	ec 81       	ldd	r30, Y+4	; 0x04
    1692:	fd 81       	ldd	r31, Y+5	; 0x05
    1694:	80 83       	st	Z, r24
    1696:	03 c0       	rjmp	.+6      	; 0x169e <MDIO_u8GetPinValue+0x122>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if port ID is invalid
    1698:	19 82       	std	Y+1, r1	; 0x01
    169a:	01 c0       	rjmp	.+2      	; 0x169e <MDIO_u8GetPinValue+0x122>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if input parameters are invalid
    169c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState; // Return the error state
    169e:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a0:	27 96       	adiw	r28, 0x07	; 7
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <MDIO_u8GetPortValue>:

/* Get Port Value */
u8 MDIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <MDIO_u8GetPortValue+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <MDIO_u8GetPortValue+0x8>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <MDIO_u8GetPortValue+0xa>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	8a 83       	std	Y+2, r24	; 0x02
    16c2:	7c 83       	std	Y+4, r23	; 0x04
    16c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_pu8ReturnedPortValue != POINTER_NULL)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <MDIO_u8GetPortValue+0x20>
    16d0:	40 c0       	rjmp	.+128    	; 0x1752 <MDIO_u8GetPortValue+0xa0>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	e1 f1       	breq	.+120    	; 0x1752 <MDIO_u8GetPortValue+0xa0>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3e 83       	std	Y+6, r19	; 0x06
    16e2:	2d 83       	std	Y+5, r18	; 0x05
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	e1 f0       	breq	.+56     	; 0x1726 <MDIO_u8GetPortValue+0x74>
    16ee:	2d 81       	ldd	r18, Y+5	; 0x05
    16f0:	3e 81       	ldd	r19, Y+6	; 0x06
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <MDIO_u8GetPortValue+0x50>
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	61 f0       	breq	.+24     	; 0x1718 <MDIO_u8GetPortValue+0x66>
    1700:	27 c0       	rjmp	.+78     	; 0x1750 <MDIO_u8GetPortValue+0x9e>
    1702:	2d 81       	ldd	r18, Y+5	; 0x05
    1704:	3e 81       	ldd	r19, Y+6	; 0x06
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	a1 f0       	breq	.+40     	; 0x1734 <MDIO_u8GetPortValue+0x82>
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	b1 f0       	breq	.+44     	; 0x1742 <MDIO_u8GetPortValue+0x90>
    1716:	1c c0       	rjmp	.+56     	; 0x1750 <MDIO_u8GetPortValue+0x9e>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINA_REG;
    1718:	e9 e3       	ldi	r30, 0x39	; 57
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	80 83       	st	Z, r24
    1724:	16 c0       	rjmp	.+44     	; 0x1752 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINB_REG;
    1726:	e6 e3       	ldi	r30, 0x36	; 54
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	eb 81       	ldd	r30, Y+3	; 0x03
    172e:	fc 81       	ldd	r31, Y+4	; 0x04
    1730:	80 83       	st	Z, r24
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINC_REG;
    1734:	e3 e3       	ldi	r30, 0x33	; 51
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	eb 81       	ldd	r30, Y+3	; 0x03
    173c:	fc 81       	ldd	r31, Y+4	; 0x04
    173e:	80 83       	st	Z, r24
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPortValue = PRIVATE_PIND_REG;
    1742:	e0 e3       	ldi	r30, 0x30	; 48
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	eb 81       	ldd	r30, Y+3	; 0x03
    174a:	fc 81       	ldd	r31, Y+4	; 0x04
    174c:	80 83       	st	Z, r24
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <MDIO_u8GetPortValue+0xa0>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    1750:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	26 96       	adiw	r28, 0x06	; 6
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <HLCD_VoidLcdIint>:
#include "HLCD_private.h"
#include "HLCD_config.h"
#include "HLCD_interface.h"

void HLCD_VoidLcdIint(void)
{
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	cc 54       	subi	r28, 0x4C	; 76
    1774:	d0 40       	sbci	r29, 0x00	; 0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	fe 01       	movw	r30, r28
    1782:	e7 5b       	subi	r30, 0xB7	; 183
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a8 ef       	ldi	r26, 0xF8	; 248
    178c:	b1 e4       	ldi	r27, 0x41	; 65
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1796:	8e 01       	movw	r16, r28
    1798:	0b 5b       	subi	r16, 0xBB	; 187
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	fe 01       	movw	r30, r28
    179e:	e7 5b       	subi	r30, 0xB7	; 183
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a ef       	ldi	r20, 0xFA	; 250
    17b0:	54 e4       	ldi	r21, 0x44	; 68
    17b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 83       	st	Z, r24
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	a2 83       	std	Z+2, r26	; 0x02
    17c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17c4:	fe 01       	movw	r30, r28
    17c6:	eb 5b       	subi	r30, 0xBB	; 187
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	44 f4       	brge	.+16     	; 0x17f2 <HLCD_VoidLcdIint+0x8c>
		__ticks = 1;
    17e2:	fe 01       	movw	r30, r28
    17e4:	ed 5b       	subi	r30, 0xBD	; 189
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	64 c0       	rjmp	.+200    	; 0x18ba <HLCD_VoidLcdIint+0x154>
	else if (__tmp > 65535)
    17f2:	fe 01       	movw	r30, r28
    17f4:	eb 5b       	subi	r30, 0xBB	; 187
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	0c f0       	brlt	.+2      	; 0x1812 <HLCD_VoidLcdIint+0xac>
    1810:	43 c0       	rjmp	.+134    	; 0x1898 <HLCD_VoidLcdIint+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	fe 01       	movw	r30, r28
    1814:	e7 5b       	subi	r30, 0xB7	; 183
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8e 01       	movw	r16, r28
    1832:	0d 5b       	subi	r16, 0xBD	; 189
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	f8 01       	movw	r30, r16
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	1f c0       	rjmp	.+62     	; 0x1888 <HLCD_VoidLcdIint+0x122>
    184a:	fe 01       	movw	r30, r28
    184c:	ef 5b       	subi	r30, 0xBF	; 191
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	88 ec       	ldi	r24, 0xC8	; 200
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1858:	fe 01       	movw	r30, r28
    185a:	ef 5b       	subi	r30, 0xBF	; 191
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <HLCD_VoidLcdIint+0xfc>
    1866:	fe 01       	movw	r30, r28
    1868:	ef 5b       	subi	r30, 0xBF	; 191
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	de 01       	movw	r26, r28
    1872:	ad 5b       	subi	r26, 0xBD	; 189
    1874:	bf 4f       	sbci	r27, 0xFF	; 255
    1876:	fe 01       	movw	r30, r28
    1878:	ed 5b       	subi	r30, 0xBD	; 189
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	9c 93       	st	X, r25
    1886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5b       	subi	r30, 0xBD	; 189
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	d1 f6       	brne	.-76     	; 0x184a <HLCD_VoidLcdIint+0xe4>
    1896:	24 c0       	rjmp	.+72     	; 0x18e0 <HLCD_VoidLcdIint+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	8e 01       	movw	r16, r28
    189a:	0d 5b       	subi	r16, 0xBD	; 189
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	fe 01       	movw	r30, r28
    18a0:	eb 5b       	subi	r30, 0xBB	; 187
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	fe 01       	movw	r30, r28
    18bc:	ed 5b       	subi	r30, 0xBD	; 189
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	fe 01       	movw	r30, r28
    18c6:	ff 96       	adiw	r30, 0x3f	; 63
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	fe 01       	movw	r30, r28
    18ce:	ff 96       	adiw	r30, 0x3f	; 63
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <HLCD_VoidLcdIint+0x16e>
    18d8:	fe 01       	movw	r30, r28
    18da:	ff 96       	adiw	r30, 0x3f	; 63
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    /* Delay for 32 Ms*/
    _delay_ms(31);

    /* Send The INntialixation Command*/
    HLCD_VoidLcdWriteCmd(0x38);
    18e0:	88 e3       	ldi	r24, 0x38	; 56
    18e2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e2       	ldi	r26, 0x20	; 32
    18ec:	b2 e4       	ldi	r27, 0x42	; 66
    18ee:	8b af       	std	Y+59, r24	; 0x3b
    18f0:	9c af       	std	Y+60, r25	; 0x3c
    18f2:	ad af       	std	Y+61, r26	; 0x3d
    18f4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    18f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    18fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    18fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    18fe:	2b ea       	ldi	r18, 0xAB	; 171
    1900:	3a ea       	ldi	r19, 0xAA	; 170
    1902:	4a e2       	ldi	r20, 0x2A	; 42
    1904:	50 e4       	ldi	r21, 0x40	; 64
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8f ab       	std	Y+55, r24	; 0x37
    1910:	98 af       	std	Y+56, r25	; 0x38
    1912:	a9 af       	std	Y+57, r26	; 0x39
    1914:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1916:	6f a9       	ldd	r22, Y+55	; 0x37
    1918:	78 ad       	ldd	r23, Y+56	; 0x38
    191a:	89 ad       	ldd	r24, Y+57	; 0x39
    191c:	9a ad       	ldd	r25, Y+58	; 0x3a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	1c f4       	brge	.+6      	; 0x1934 <HLCD_VoidLcdIint+0x1ce>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	8e ab       	std	Y+54, r24	; 0x36
    1932:	91 c0       	rjmp	.+290    	; 0x1a56 <HLCD_VoidLcdIint+0x2f0>
	else if (__tmp > 255)
    1934:	6f a9       	ldd	r22, Y+55	; 0x37
    1936:	78 ad       	ldd	r23, Y+56	; 0x38
    1938:	89 ad       	ldd	r24, Y+57	; 0x39
    193a:	9a ad       	ldd	r25, Y+58	; 0x3a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	53 e4       	ldi	r21, 0x43	; 67
    1944:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	0c f0       	brlt	.+2      	; 0x194e <HLCD_VoidLcdIint+0x1e8>
    194c:	7b c0       	rjmp	.+246    	; 0x1a44 <HLCD_VoidLcdIint+0x2de>
	{
		_delay_ms(__us / 1000.0);
    194e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1950:	7c ad       	ldd	r23, Y+60	; 0x3c
    1952:	8d ad       	ldd	r24, Y+61	; 0x3d
    1954:	9e ad       	ldd	r25, Y+62	; 0x3e
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a e7       	ldi	r20, 0x7A	; 122
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8a ab       	std	Y+50, r24	; 0x32
    1968:	9b ab       	std	Y+51, r25	; 0x33
    196a:	ac ab       	std	Y+52, r26	; 0x34
    196c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	6a a9       	ldd	r22, Y+50	; 0x32
    1970:	7b a9       	ldd	r23, Y+51	; 0x33
    1972:	8c a9       	ldd	r24, Y+52	; 0x34
    1974:	9d a9       	ldd	r25, Y+53	; 0x35
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a ef       	ldi	r20, 0xFA	; 250
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8e a7       	std	Y+46, r24	; 0x2e
    1988:	9f a7       	std	Y+47, r25	; 0x2f
    198a:	a8 ab       	std	Y+48, r26	; 0x30
    198c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    198e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1990:	7f a5       	ldd	r23, Y+47	; 0x2f
    1992:	88 a9       	ldd	r24, Y+48	; 0x30
    1994:	99 a9       	ldd	r25, Y+49	; 0x31
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <HLCD_VoidLcdIint+0x24a>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9d a7       	std	Y+45, r25	; 0x2d
    19ac:	8c a7       	std	Y+44, r24	; 0x2c
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <HLCD_VoidLcdIint+0x2c8>
	else if (__tmp > 65535)
    19b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    19b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    19b4:	88 a9       	ldd	r24, Y+48	; 0x30
    19b6:	99 a9       	ldd	r25, Y+49	; 0x31
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	4c f5       	brge	.+82     	; 0x1a1a <HLCD_VoidLcdIint+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c8:	6a a9       	ldd	r22, Y+50	; 0x32
    19ca:	7b a9       	ldd	r23, Y+51	; 0x33
    19cc:	8c a9       	ldd	r24, Y+52	; 0x34
    19ce:	9d a9       	ldd	r25, Y+53	; 0x35
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9d a7       	std	Y+45, r25	; 0x2d
    19ee:	8c a7       	std	Y+44, r24	; 0x2c
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <HLCD_VoidLcdIint+0x2aa>
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9b a7       	std	Y+43, r25	; 0x2b
    19f8:	8a a7       	std	Y+42, r24	; 0x2a
    19fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    19fc:	9b a5       	ldd	r25, Y+43	; 0x2b
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <HLCD_VoidLcdIint+0x298>
    1a02:	9b a7       	std	Y+43, r25	; 0x2b
    1a04:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a08:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	9d a7       	std	Y+45, r25	; 0x2d
    1a0e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a12:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	69 f7       	brne	.-38     	; 0x19f2 <HLCD_VoidLcdIint+0x28c>
    1a18:	24 c0       	rjmp	.+72     	; 0x1a62 <HLCD_VoidLcdIint+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a1c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a1e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a20:	99 a9       	ldd	r25, Y+49	; 0x31
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9d a7       	std	Y+45, r25	; 0x2d
    1a2c:	8c a7       	std	Y+44, r24	; 0x2c
    1a2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a30:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a32:	99 a7       	std	Y+41, r25	; 0x29
    1a34:	88 a7       	std	Y+40, r24	; 0x28
    1a36:	88 a5       	ldd	r24, Y+40	; 0x28
    1a38:	99 a5       	ldd	r25, Y+41	; 0x29
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <HLCD_VoidLcdIint+0x2d4>
    1a3e:	99 a7       	std	Y+41, r25	; 0x29
    1a40:	88 a7       	std	Y+40, r24	; 0x28
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <HLCD_VoidLcdIint+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a44:	6f a9       	ldd	r22, Y+55	; 0x37
    1a46:	78 ad       	ldd	r23, Y+56	; 0x38
    1a48:	89 ad       	ldd	r24, Y+57	; 0x39
    1a4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8e ab       	std	Y+54, r24	; 0x36
    1a56:	8e a9       	ldd	r24, Y+54	; 0x36
    1a58:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a5a:	8f a1       	ldd	r24, Y+39	; 0x27
    1a5c:	8a 95       	dec	r24
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <HLCD_VoidLcdIint+0x2f6>
    1a60:	8f a3       	std	Y+39, r24	; 0x27

    /*Delay for 1 Ms*/
    _delay_us(40);

    /* Display ON/OFF Control*/
    HLCD_VoidLcdWriteCmd(0x0f);
    1a62:	8f e0       	ldi	r24, 0x0F	; 15
    1a64:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e2       	ldi	r26, 0x20	; 32
    1a6e:	b2 e4       	ldi	r27, 0x42	; 66
    1a70:	8b a3       	std	Y+35, r24	; 0x23
    1a72:	9c a3       	std	Y+36, r25	; 0x24
    1a74:	ad a3       	std	Y+37, r26	; 0x25
    1a76:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a78:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a80:	2b ea       	ldi	r18, 0xAB	; 171
    1a82:	3a ea       	ldi	r19, 0xAA	; 170
    1a84:	4a e2       	ldi	r20, 0x2A	; 42
    1a86:	50 e4       	ldi	r21, 0x40	; 64
    1a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8f 8f       	std	Y+31, r24	; 0x1f
    1a92:	98 a3       	std	Y+32, r25	; 0x20
    1a94:	a9 a3       	std	Y+33, r26	; 0x21
    1a96:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a9a:	78 a1       	ldd	r23, Y+32	; 0x20
    1a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	1c f4       	brge	.+6      	; 0x1ab6 <HLCD_VoidLcdIint+0x350>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ab4:	91 c0       	rjmp	.+290    	; 0x1bd8 <HLCD_VoidLcdIint+0x472>
	else if (__tmp > 255)
    1ab6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ab8:	78 a1       	ldd	r23, Y+32	; 0x20
    1aba:	89 a1       	ldd	r24, Y+33	; 0x21
    1abc:	9a a1       	ldd	r25, Y+34	; 0x22
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	53 e4       	ldi	r21, 0x43	; 67
    1ac6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	0c f0       	brlt	.+2      	; 0x1ad0 <HLCD_VoidLcdIint+0x36a>
    1ace:	7b c0       	rjmp	.+246    	; 0x1bc6 <HLCD_VoidLcdIint+0x460>
	{
		_delay_ms(__us / 1000.0);
    1ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a e7       	ldi	r20, 0x7A	; 122
    1ade:	54 e4       	ldi	r21, 0x44	; 68
    1ae0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8a 8f       	std	Y+26, r24	; 0x1a
    1aea:	9b 8f       	std	Y+27, r25	; 0x1b
    1aec:	ac 8f       	std	Y+28, r26	; 0x1c
    1aee:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1af2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1af4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1af6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a ef       	ldi	r20, 0xFA	; 250
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8e 8b       	std	Y+22, r24	; 0x16
    1b0a:	9f 8b       	std	Y+23, r25	; 0x17
    1b0c:	a8 8f       	std	Y+24, r26	; 0x18
    1b0e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b10:	6e 89       	ldd	r22, Y+22	; 0x16
    1b12:	7f 89       	ldd	r23, Y+23	; 0x17
    1b14:	88 8d       	ldd	r24, Y+24	; 0x18
    1b16:	99 8d       	ldd	r25, Y+25	; 0x19
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <HLCD_VoidLcdIint+0x3cc>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9d 8b       	std	Y+21, r25	; 0x15
    1b2e:	8c 8b       	std	Y+20, r24	; 0x14
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <HLCD_VoidLcdIint+0x44a>
	else if (__tmp > 65535)
    1b32:	6e 89       	ldd	r22, Y+22	; 0x16
    1b34:	7f 89       	ldd	r23, Y+23	; 0x17
    1b36:	88 8d       	ldd	r24, Y+24	; 0x18
    1b38:	99 8d       	ldd	r25, Y+25	; 0x19
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <HLCD_VoidLcdIint+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b4c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9d 8b       	std	Y+21, r25	; 0x15
    1b70:	8c 8b       	std	Y+20, r24	; 0x14
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <HLCD_VoidLcdIint+0x42c>
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9b 8b       	std	Y+19, r25	; 0x13
    1b7a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b7e:	9b 89       	ldd	r25, Y+19	; 0x13
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <HLCD_VoidLcdIint+0x41a>
    1b84:	9b 8b       	std	Y+19, r25	; 0x13
    1b86:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8c 89       	ldd	r24, Y+20	; 0x14
    1b8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9d 8b       	std	Y+21, r25	; 0x15
    1b90:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8c 89       	ldd	r24, Y+20	; 0x14
    1b94:	9d 89       	ldd	r25, Y+21	; 0x15
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <HLCD_VoidLcdIint+0x40e>
    1b9a:	24 c0       	rjmp	.+72     	; 0x1be4 <HLCD_VoidLcdIint+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6e 89       	ldd	r22, Y+22	; 0x16
    1b9e:	7f 89       	ldd	r23, Y+23	; 0x17
    1ba0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ba4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9d 8b       	std	Y+21, r25	; 0x15
    1bae:	8c 8b       	std	Y+20, r24	; 0x14
    1bb0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb2:	9d 89       	ldd	r25, Y+21	; 0x15
    1bb4:	99 8b       	std	Y+17, r25	; 0x11
    1bb6:	88 8b       	std	Y+16, r24	; 0x10
    1bb8:	88 89       	ldd	r24, Y+16	; 0x10
    1bba:	99 89       	ldd	r25, Y+17	; 0x11
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <HLCD_VoidLcdIint+0x456>
    1bc0:	99 8b       	std	Y+17, r25	; 0x11
    1bc2:	88 8b       	std	Y+16, r24	; 0x10
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <HLCD_VoidLcdIint+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bc6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bc8:	78 a1       	ldd	r23, Y+32	; 0x20
    1bca:	89 a1       	ldd	r24, Y+33	; 0x21
    1bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8e 8f       	std	Y+30, r24	; 0x1e
    1bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bde:	8a 95       	dec	r24
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <HLCD_VoidLcdIint+0x478>
    1be2:	8f 87       	std	Y+15, r24	; 0x0f

    /*Delay for 1 Ms*/
    _delay_us(40);

    /* Display Clear*/
    HLCD_VoidLcdWriteCmd(0x01);
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b0 e4       	ldi	r27, 0x40	; 64
    1bf2:	8b 87       	std	Y+11, r24	; 0x0b
    1bf4:	9c 87       	std	Y+12, r25	; 0x0c
    1bf6:	ad 87       	std	Y+13, r26	; 0x0d
    1bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a ef       	ldi	r20, 0xFA	; 250
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8f 83       	std	Y+7, r24	; 0x07
    1c14:	98 87       	std	Y+8, r25	; 0x08
    1c16:	a9 87       	std	Y+9, r26	; 0x09
    1c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1c:	78 85       	ldd	r23, Y+8	; 0x08
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <HLCD_VoidLcdIint+0x4d6>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	8d 83       	std	Y+5, r24	; 0x05
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <HLCD_VoidLcdIint+0x554>
	else if (__tmp > 65535)
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <HLCD_VoidLcdIint+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <HLCD_VoidLcdIint+0x536>
    1c7e:	88 ec       	ldi	r24, 0xC8	; 200
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9c 83       	std	Y+4, r25	; 0x04
    1c84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <HLCD_VoidLcdIint+0x524>
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <HLCD_VoidLcdIint+0x518>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <HLCD_VoidLcdIint+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <HLCD_VoidLcdIint+0x560>
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01

    /*Delay for 1 Ms*/
    _delay_ms(2);

    /* Display Entery Mode Set*/
    HLCD_VoidLcdWriteCmd(0x06);
    1cce:	86 e0       	ldi	r24, 0x06	; 6
    1cd0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
}
    1cd4:	c4 5b       	subi	r28, 0xB4	; 180
    1cd6:	df 4f       	sbci	r29, 0xFF	; 255
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <HLCD_VoidLcdWriteCmd>:

void HLCD_VoidLcdWriteCmd(u8 Copy_u8Cmd)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	69 97       	sbiw	r28, 0x19	; 25
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	89 8f       	std	Y+25, r24	; 0x19

    /*	RS pin  = 0 ==> Select Command Register*/
    MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_LOW);
    1d02:	83 e0       	ldi	r24, 0x03	; 3
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>

    /*	R/W pin  = 0 ==> Select Write Mode*/
    MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>

    /*	E pin  = 1 ==> Enable the command */
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>

    /*	Write Command */
    MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Cmd);
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	69 8d       	ldd	r22, Y+25	; 0x19
    1d24:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MDIO_u8SetPortValue>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	8d 8b       	std	Y+21, r24	; 0x15
    1d32:	9e 8b       	std	Y+22, r25	; 0x16
    1d34:	af 8b       	std	Y+23, r26	; 0x17
    1d36:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	2b ea       	ldi	r18, 0xAB	; 171
    1d42:	3a ea       	ldi	r19, 0xAA	; 170
    1d44:	4a e2       	ldi	r20, 0x2A	; 42
    1d46:	50 e4       	ldi	r21, 0x40	; 64
    1d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	89 8b       	std	Y+17, r24	; 0x11
    1d52:	9a 8b       	std	Y+18, r25	; 0x12
    1d54:	ab 8b       	std	Y+19, r26	; 0x13
    1d56:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d58:	69 89       	ldd	r22, Y+17	; 0x11
    1d5a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	1c f4       	brge	.+6      	; 0x1d76 <HLCD_VoidLcdWriteCmd+0x8a>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	88 8b       	std	Y+16, r24	; 0x10
    1d74:	91 c0       	rjmp	.+290    	; 0x1e98 <HLCD_VoidLcdWriteCmd+0x1ac>
	else if (__tmp > 255)
    1d76:	69 89       	ldd	r22, Y+17	; 0x11
    1d78:	7a 89       	ldd	r23, Y+18	; 0x12
    1d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	53 e4       	ldi	r21, 0x43	; 67
    1d86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	0c f0       	brlt	.+2      	; 0x1d90 <HLCD_VoidLcdWriteCmd+0xa4>
    1d8e:	7b c0       	rjmp	.+246    	; 0x1e86 <HLCD_VoidLcdWriteCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1d90:	6d 89       	ldd	r22, Y+21	; 0x15
    1d92:	7e 89       	ldd	r23, Y+22	; 0x16
    1d94:	8f 89       	ldd	r24, Y+23	; 0x17
    1d96:	98 8d       	ldd	r25, Y+24	; 0x18
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8c 87       	std	Y+12, r24	; 0x0c
    1daa:	9d 87       	std	Y+13, r25	; 0x0d
    1dac:	ae 87       	std	Y+14, r26	; 0x0e
    1dae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1db2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1db4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	88 87       	std	Y+8, r24	; 0x08
    1dca:	99 87       	std	Y+9, r25	; 0x09
    1dcc:	aa 87       	std	Y+10, r26	; 0x0a
    1dce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dd0:	68 85       	ldd	r22, Y+8	; 0x08
    1dd2:	79 85       	ldd	r23, Y+9	; 0x09
    1dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <HLCD_VoidLcdWriteCmd+0x106>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9f 83       	std	Y+7, r25	; 0x07
    1dee:	8e 83       	std	Y+6, r24	; 0x06
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <HLCD_VoidLcdWriteCmd+0x184>
	else if (__tmp > 65535)
    1df2:	68 85       	ldd	r22, Y+8	; 0x08
    1df4:	79 85       	ldd	r23, Y+9	; 0x09
    1df6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1df8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <HLCD_VoidLcdWriteCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9f 83       	std	Y+7, r25	; 0x07
    1e30:	8e 83       	std	Y+6, r24	; 0x06
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <HLCD_VoidLcdWriteCmd+0x166>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9d 83       	std	Y+5, r25	; 0x05
    1e3a:	8c 83       	std	Y+4, r24	; 0x04
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <HLCD_VoidLcdWriteCmd+0x154>
    1e44:	9d 83       	std	Y+5, r25	; 0x05
    1e46:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9f 83       	std	Y+7, r25	; 0x07
    1e50:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8e 81       	ldd	r24, Y+6	; 0x06
    1e54:	9f 81       	ldd	r25, Y+7	; 0x07
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <HLCD_VoidLcdWriteCmd+0x148>
    1e5a:	24 c0       	rjmp	.+72     	; 0x1ea4 <HLCD_VoidLcdWriteCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	68 85       	ldd	r22, Y+8	; 0x08
    1e5e:	79 85       	ldd	r23, Y+9	; 0x09
    1e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9f 83       	std	Y+7, r25	; 0x07
    1e6e:	8e 83       	std	Y+6, r24	; 0x06
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	9f 81       	ldd	r25, Y+7	; 0x07
    1e74:	9b 83       	std	Y+3, r25	; 0x03
    1e76:	8a 83       	std	Y+2, r24	; 0x02
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <HLCD_VoidLcdWriteCmd+0x190>
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <HLCD_VoidLcdWriteCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e86:	69 89       	ldd	r22, Y+17	; 0x11
    1e88:	7a 89       	ldd	r23, Y+18	; 0x12
    1e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	88 8b       	std	Y+16, r24	; 0x10
    1e98:	88 89       	ldd	r24, Y+16	; 0x10
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	8a 95       	dec	r24
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <HLCD_VoidLcdWriteCmd+0x1b2>
    1ea2:	89 83       	std	Y+1, r24	; 0x01

    /*	Wait for 230 ns */
    _delay_us(1);

    /*	E pin  = 0 ==> Disable the command*/
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>
}
    1eae:	69 96       	adiw	r28, 0x19	; 25
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <HLCD_VoidLcdWriteChar>:

void HLCD_VoidLcdWriteChar(u8 Copy_u8Char)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	69 97       	sbiw	r28, 0x19	; 25
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	89 8f       	std	Y+25, r24	; 0x19

    /*	RS pin  = 0 ==> Select Command Register*/
    MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_HIGH);
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>

    /*	R/W pin  = 0 ==> Select Write Mode*/
    MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>

    /*	E pin  = 1 ==> Enable the command */
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	62 e0       	ldi	r22, 0x02	; 2
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>

    /*	Write Command */
    MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Char);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MDIO_u8SetPortValue>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	8d 8b       	std	Y+21, r24	; 0x15
    1f06:	9e 8b       	std	Y+22, r25	; 0x16
    1f08:	af 8b       	std	Y+23, r26	; 0x17
    1f0a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	2b ea       	ldi	r18, 0xAB	; 171
    1f16:	3a ea       	ldi	r19, 0xAA	; 170
    1f18:	4a e2       	ldi	r20, 0x2A	; 42
    1f1a:	50 e4       	ldi	r21, 0x40	; 64
    1f1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	89 8b       	std	Y+17, r24	; 0x11
    1f26:	9a 8b       	std	Y+18, r25	; 0x12
    1f28:	ab 8b       	std	Y+19, r26	; 0x13
    1f2a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f2c:	69 89       	ldd	r22, Y+17	; 0x11
    1f2e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f30:	8b 89       	ldd	r24, Y+19	; 0x13
    1f32:	9c 89       	ldd	r25, Y+20	; 0x14
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	1c f4       	brge	.+6      	; 0x1f4a <HLCD_VoidLcdWriteChar+0x8a>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	88 8b       	std	Y+16, r24	; 0x10
    1f48:	91 c0       	rjmp	.+290    	; 0x206c <HLCD_VoidLcdWriteChar+0x1ac>
	else if (__tmp > 255)
    1f4a:	69 89       	ldd	r22, Y+17	; 0x11
    1f4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	0c f0       	brlt	.+2      	; 0x1f64 <HLCD_VoidLcdWriteChar+0xa4>
    1f62:	7b c0       	rjmp	.+246    	; 0x205a <HLCD_VoidLcdWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a e7       	ldi	r20, 0x7A	; 122
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8c 87       	std	Y+12, r24	; 0x0c
    1f7e:	9d 87       	std	Y+13, r25	; 0x0d
    1f80:	ae 87       	std	Y+14, r26	; 0x0e
    1f82:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f86:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	88 87       	std	Y+8, r24	; 0x08
    1f9e:	99 87       	std	Y+9, r25	; 0x09
    1fa0:	aa 87       	std	Y+10, r26	; 0x0a
    1fa2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fa4:	68 85       	ldd	r22, Y+8	; 0x08
    1fa6:	79 85       	ldd	r23, Y+9	; 0x09
    1fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1faa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <HLCD_VoidLcdWriteChar+0x106>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9f 83       	std	Y+7, r25	; 0x07
    1fc2:	8e 83       	std	Y+6, r24	; 0x06
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <HLCD_VoidLcdWriteChar+0x184>
	else if (__tmp > 65535)
    1fc6:	68 85       	ldd	r22, Y+8	; 0x08
    1fc8:	79 85       	ldd	r23, Y+9	; 0x09
    1fca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <HLCD_VoidLcdWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fe0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fe2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fe4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9f 83       	std	Y+7, r25	; 0x07
    2004:	8e 83       	std	Y+6, r24	; 0x06
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <HLCD_VoidLcdWriteChar+0x166>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9d 83       	std	Y+5, r25	; 0x05
    200e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	9d 81       	ldd	r25, Y+5	; 0x05
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <HLCD_VoidLcdWriteChar+0x154>
    2018:	9d 83       	std	Y+5, r25	; 0x05
    201a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9f 83       	std	Y+7, r25	; 0x07
    2024:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <HLCD_VoidLcdWriteChar+0x148>
    202e:	24 c0       	rjmp	.+72     	; 0x2078 <HLCD_VoidLcdWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	68 85       	ldd	r22, Y+8	; 0x08
    2032:	79 85       	ldd	r23, Y+9	; 0x09
    2034:	8a 85       	ldd	r24, Y+10	; 0x0a
    2036:	9b 85       	ldd	r25, Y+11	; 0x0b
    2038:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9f 83       	std	Y+7, r25	; 0x07
    2042:	8e 83       	std	Y+6, r24	; 0x06
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	9b 83       	std	Y+3, r25	; 0x03
    204a:	8a 83       	std	Y+2, r24	; 0x02
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <HLCD_VoidLcdWriteChar+0x190>
    2054:	9b 83       	std	Y+3, r25	; 0x03
    2056:	8a 83       	std	Y+2, r24	; 0x02
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <HLCD_VoidLcdWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    205a:	69 89       	ldd	r22, Y+17	; 0x11
    205c:	7a 89       	ldd	r23, Y+18	; 0x12
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	88 8b       	std	Y+16, r24	; 0x10
    206c:	88 89       	ldd	r24, Y+16	; 0x10
    206e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	8a 95       	dec	r24
    2074:	f1 f7       	brne	.-4      	; 0x2072 <HLCD_VoidLcdWriteChar+0x1b2>
    2076:	89 83       	std	Y+1, r24	; 0x01

    /*	Wait for 230 ns */
    _delay_us(1);

    /*	E pin  = 0 ==> Disable the command*/
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	62 e0       	ldi	r22, 0x02	; 2
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>
}
    2082:	69 96       	adiw	r28, 0x19	; 25
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <HLCD_VoidSetCurser>:
u8 HLCD_VoidSetCurser(u8 Copy_u8LineNb, u8 Copy_u8CharNb)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <HLCD_VoidSetCurser+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <HLCD_VoidSetCurser+0x8>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8a 83       	std	Y+2, r24	; 0x02
    20a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPE_OK;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8LineNb)
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3d 83       	std	Y+5, r19	; 0x05
    20b2:	2c 83       	std	Y+4, r18	; 0x04
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	9d 81       	ldd	r25, Y+5	; 0x05
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	91 05       	cpc	r25, r1
    20bc:	31 f0       	breq	.+12     	; 0x20ca <HLCD_VoidSetCurser+0x36>
    20be:	2c 81       	ldd	r18, Y+4	; 0x04
    20c0:	3d 81       	ldd	r19, Y+5	; 0x05
    20c2:	22 30       	cpi	r18, 0x02	; 2
    20c4:	31 05       	cpc	r19, r1
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <HLCD_VoidSetCurser+0x40>
    20c8:	0a c0       	rjmp	.+20     	; 0x20de <HLCD_VoidSetCurser+0x4a>
    {
    case HLCD_LINE_1:
        HLCD_VoidLcdWriteCmd(0x80 + Copy_u8CharNb);
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	80 58       	subi	r24, 0x80	; 128
    20ce:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <HLCD_VoidSetCurser+0x4c>
        break;
    case HLCD_LINE_2:
        HLCD_VoidLcdWriteCmd(0xc0 + Copy_u8CharNb);
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	80 54       	subi	r24, 0x40	; 64
    20d8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <HLCD_VoidSetCurser+0x4c>
        break;
    default:
        Local_u8ErrorState = STD_TYPE_NOK;
    20de:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return Local_u8ErrorState;
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <HLCD_u8WriteStr>:
u8 HLCD_u8WriteStr(const char *Copy_pcStr)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <HLCD_u8WriteStr+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <HLCD_u8WriteStr+0x8>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <HLCD_u8WriteStr+0xa>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9d 83       	std	Y+5, r25	; 0x05
    2102:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ErrorState = STD_TYPE_OK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8b 83       	std	Y+3, r24	; 0x03

    if (Copy_pcStr == STD_TYPE_POINTER_NULL)
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	11 f4       	brne	.+4      	; 0x2114 <HLCD_u8WriteStr+0x22>
    {
        return STD_TYPE_NOK; // Error if null pointer is passed
    2110:	1e 82       	std	Y+6, r1	; 0x06
    2112:	33 c0       	rjmp	.+102    	; 0x217a <HLCD_u8WriteStr+0x88>
    }

    // Starting position
    u8 Line = HLCD_LINE_1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	8a 83       	std	Y+2, r24	; 0x02
    u8 CharPos = 0;
    2118:	19 82       	std	Y+1, r1	; 0x01
    211a:	28 c0       	rjmp	.+80     	; 0x216c <HLCD_u8WriteStr+0x7a>

    // Write characters until the end of the string
    while (*Copy_pcStr)
    {
        // If we reach the end of the first line, switch to the second line
        if (CharPos >= 16 && Line == HLCD_LINE_1)
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	80 31       	cpi	r24, 0x10	; 16
    2120:	50 f0       	brcs	.+20     	; 0x2136 <HLCD_u8WriteStr+0x44>
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	39 f4       	brne	.+14     	; 0x2136 <HLCD_u8WriteStr+0x44>
        {
            Line = HLCD_LINE_2;
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    212c:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the second line
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	69 81       	ldd	r22, Y+1	; 0x01
    2132:	0e 94 4a 10 	call	0x2094	; 0x2094 <HLCD_VoidSetCurser>
        }

        // If we reach the end of the second line, wrap around to the start of the first line
        if (CharPos >= 16 && Line == HLCD_LINE_2)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	80 31       	cpi	r24, 0x10	; 16
    213a:	50 f0       	brcs	.+20     	; 0x2150 <HLCD_u8WriteStr+0x5e>
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	39 f4       	brne	.+14     	; 0x2150 <HLCD_u8WriteStr+0x5e>
        {
            Line = HLCD_LINE_1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    2146:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the first line
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	69 81       	ldd	r22, Y+1	; 0x01
    214c:	0e 94 4a 10 	call	0x2094	; 0x2094 <HLCD_VoidSetCurser>
        }

        // Write the current character to the LCD
        HLCD_VoidLcdWriteChar(*Copy_pcStr++);
    2150:	ec 81       	ldd	r30, Y+4	; 0x04
    2152:	fd 81       	ldd	r31, Y+5	; 0x05
    2154:	20 81       	ld	r18, Z
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	9d 81       	ldd	r25, Y+5	; 0x05
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	9d 83       	std	Y+5, r25	; 0x05
    215e:	8c 83       	std	Y+4, r24	; 0x04
    2160:	82 2f       	mov	r24, r18
    2162:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <HLCD_VoidLcdWriteChar>

        // Increment character position
        CharPos++;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	89 83       	std	Y+1, r24	; 0x01
    // Starting position
    u8 Line = HLCD_LINE_1;
    u8 CharPos = 0;

    // Write characters until the end of the string
    while (*Copy_pcStr)
    216c:	ec 81       	ldd	r30, Y+4	; 0x04
    216e:	fd 81       	ldd	r31, Y+5	; 0x05
    2170:	80 81       	ld	r24, Z
    2172:	88 23       	and	r24, r24
    2174:	99 f6       	brne	.-90     	; 0x211c <HLCD_u8WriteStr+0x2a>

        // Increment character position
        CharPos++;
    }

    return Local_u8ErrorState;
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	8e 83       	std	Y+6, r24	; 0x06
    217a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    217c:	26 96       	adiw	r28, 0x06	; 6
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <HLCD_VoidLcdClear>:
void HLCD_VoidLcdClear(void)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	2e 97       	sbiw	r28, 0x0e	; 14
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    // Send the clear display command (0x01) to the LCD
    HLCD_VoidLcdWriteCmd(0x01);
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HLCD_VoidLcdWriteCmd>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e4       	ldi	r27, 0x40	; 64
    21b0:	8b 87       	std	Y+11, r24	; 0x0b
    21b2:	9c 87       	std	Y+12, r25	; 0x0c
    21b4:	ad 87       	std	Y+13, r26	; 0x0d
    21b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    21bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21be:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a ef       	ldi	r20, 0xFA	; 250
    21c6:	54 e4       	ldi	r21, 0x44	; 68
    21c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	8f 83       	std	Y+7, r24	; 0x07
    21d2:	98 87       	std	Y+8, r25	; 0x08
    21d4:	a9 87       	std	Y+9, r26	; 0x09
    21d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e8       	ldi	r20, 0x80	; 128
    21e6:	5f e3       	ldi	r21, 0x3F	; 63
    21e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21ec:	88 23       	and	r24, r24
    21ee:	2c f4       	brge	.+10     	; 0x21fa <HLCD_VoidLcdClear+0x6c>
		__ticks = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	3f c0       	rjmp	.+126    	; 0x2278 <HLCD_VoidLcdClear+0xea>
	else if (__tmp > 65535)
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	4c f5       	brge	.+82     	; 0x2264 <HLCD_VoidLcdClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	6b 85       	ldd	r22, Y+11	; 0x0b
    2214:	7c 85       	ldd	r23, Y+12	; 0x0c
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	0f c0       	rjmp	.+30     	; 0x225a <HLCD_VoidLcdClear+0xcc>
    223c:	88 ec       	ldi	r24, 0xC8	; 200
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <HLCD_VoidLcdClear+0xba>
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	69 f7       	brne	.-38     	; 0x223c <HLCD_VoidLcdClear+0xae>
    2262:	14 c0       	rjmp	.+40     	; 0x228c <HLCD_VoidLcdClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <HLCD_VoidLcdClear+0xf6>
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01

    // Delay to allow the LCD to process the command and clear the screen
    _delay_ms(2); // 2 ms is typically enough for clearing the screen
}
    228c:	2e 96       	adiw	r28, 0x0e	; 14
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <HLCD_VoidLcdWriteInt>:
void HLCD_VoidLcdWriteInt(int Copy_u32Number)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	a0 97       	sbiw	r28, 0x20	; 32
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
    char buffer[BUFFER_SIZE]; // Buffer to hold the converted string
    char temp[BUFFER_SIZE];   // Temporary buffer for reverse string
    int isNegative = 0;       // Flag to check if number is negative
    22b6:	1e 82       	std	Y+6, r1	; 0x06
    22b8:	1d 82       	std	Y+5, r1	; 0x05
    int i = 0, j;
    22ba:	1c 82       	std	Y+4, r1	; 0x04
    22bc:	1b 82       	std	Y+3, r1	; 0x03

    // Check if the number is negative
    if (Copy_u32Number < 0)
    22be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c0:	98 a1       	ldd	r25, Y+32	; 0x20
    22c2:	99 23       	and	r25, r25
    22c4:	5c f4       	brge	.+22     	; 0x22dc <HLCD_VoidLcdWriteInt+0x3e>
    {
        isNegative = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
        Copy_u32Number = -Copy_u32Number; // Make number positive
    22ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d0:	98 a1       	ldd	r25, Y+32	; 0x20
    22d2:	90 95       	com	r25
    22d4:	81 95       	neg	r24
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	98 a3       	std	Y+32, r25	; 0x20
    22da:	8f 8f       	std	Y+31, r24	; 0x1f
    }

    // Convert integer to string
    do
    {
        buffer[i++] = (Copy_u32Number % 10) + '0'; // Get last digit
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22e2:	98 a1       	ldd	r25, Y+32	; 0x20
    22e4:	2a e0       	ldi	r18, 0x0A	; 10
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__divmodhi4>
    22ee:	28 2f       	mov	r18, r24
    22f0:	20 5d       	subi	r18, 0xD0	; 208
    22f2:	ce 01       	movw	r24, r28
    22f4:	07 96       	adiw	r24, 0x07	; 7
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
    22fa:	20 83       	st	Z, r18
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
        Copy_u32Number /= 10;                      // Remove last digit
    2306:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2308:	98 a1       	ldd	r25, Y+32	; 0x20
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	b9 01       	movw	r22, r18
    2310:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__divmodhi4>
    2314:	cb 01       	movw	r24, r22
    2316:	98 a3       	std	Y+32, r25	; 0x20
    2318:	8f 8f       	std	Y+31, r24	; 0x1f
    } while (Copy_u32Number > 0);
    231a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    231c:	98 a1       	ldd	r25, Y+32	; 0x20
    231e:	18 16       	cp	r1, r24
    2320:	19 06       	cpc	r1, r25
    2322:	e4 f2       	brlt	.-72     	; 0x22dc <HLCD_VoidLcdWriteInt+0x3e>

    // Add negative sign if needed
    if (isNegative)
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	71 f0       	breq	.+28     	; 0x2348 <HLCD_VoidLcdWriteInt+0xaa>
    {
        buffer[i++] = '-';
    232c:	2b 81       	ldd	r18, Y+3	; 0x03
    232e:	3c 81       	ldd	r19, Y+4	; 0x04
    2330:	ce 01       	movw	r24, r28
    2332:	07 96       	adiw	r24, 0x07	; 7
    2334:	fc 01       	movw	r30, r24
    2336:	e2 0f       	add	r30, r18
    2338:	f3 1f       	adc	r31, r19
    233a:	8d e2       	ldi	r24, 0x2D	; 45
    233c:	80 83       	st	Z, r24
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	9e 01       	movw	r18, r28
    234e:	29 5f       	subi	r18, 0xF9	; 249
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	f9 01       	movw	r30, r18
    2354:	e8 0f       	add	r30, r24
    2356:	f9 1f       	adc	r31, r25
    2358:	10 82       	st	Z, r1
    for (j = 0; j < i; j++)
    235a:	1a 82       	std	Y+2, r1	; 0x02
    235c:	19 82       	std	Y+1, r1	; 0x01
    235e:	1e c0       	rjmp	.+60     	; 0x239c <HLCD_VoidLcdWriteInt+0xfe>
    {
        temp[j] = buffer[i - j - 1];
    2360:	49 81       	ldd	r20, Y+1	; 0x01
    2362:	5a 81       	ldd	r21, Y+2	; 0x02
    2364:	2b 81       	ldd	r18, Y+3	; 0x03
    2366:	3c 81       	ldd	r19, Y+4	; 0x04
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	b9 01       	movw	r22, r18
    236e:	68 1b       	sub	r22, r24
    2370:	79 0b       	sbc	r23, r25
    2372:	cb 01       	movw	r24, r22
    2374:	9c 01       	movw	r18, r24
    2376:	21 50       	subi	r18, 0x01	; 1
    2378:	30 40       	sbci	r19, 0x00	; 0
    237a:	ce 01       	movw	r24, r28
    237c:	07 96       	adiw	r24, 0x07	; 7
    237e:	fc 01       	movw	r30, r24
    2380:	e2 0f       	add	r30, r18
    2382:	f3 1f       	adc	r31, r19
    2384:	20 81       	ld	r18, Z
    2386:	ce 01       	movw	r24, r28
    2388:	43 96       	adiw	r24, 0x13	; 19
    238a:	fc 01       	movw	r30, r24
    238c:	e4 0f       	add	r30, r20
    238e:	f5 1f       	adc	r31, r21
    2390:	20 83       	st	Z, r18
        buffer[i++] = '-';
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    for (j = 0; j < i; j++)
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	29 81       	ldd	r18, Y+1	; 0x01
    239e:	3a 81       	ldd	r19, Y+2	; 0x02
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	28 17       	cp	r18, r24
    23a6:	39 07       	cpc	r19, r25
    23a8:	dc f2       	brlt	.-74     	; 0x2360 <HLCD_VoidLcdWriteInt+0xc2>
    {
        temp[j] = buffer[i - j - 1];
    }
    temp[i] = '\0'; // Null-terminate the reversed string
    23aa:	2b 81       	ldd	r18, Y+3	; 0x03
    23ac:	3c 81       	ldd	r19, Y+4	; 0x04
    23ae:	ce 01       	movw	r24, r28
    23b0:	43 96       	adiw	r24, 0x13	; 19
    23b2:	fc 01       	movw	r30, r24
    23b4:	e2 0f       	add	r30, r18
    23b6:	f3 1f       	adc	r31, r19
    23b8:	10 82       	st	Z, r1

    // Write the string to the LCD
    HLCD_u8WriteStr(temp);
    23ba:	ce 01       	movw	r24, r28
    23bc:	43 96       	adiw	r24, 0x13	; 19
    23be:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
}
    23c2:	a0 96       	adiw	r28, 0x20	; 32
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <HLCD_VoidLcdWriteFloat>:

/* Draw Special Chars */
/* 1- Sned Command to set CGRAM Address */
/* Draw 1 Special Char into First Char in CGRAM*/

void HLCD_VoidLcdWriteFloat(float Copy_f32Number){
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	2a 97       	sbiw	r28, 0x0a	; 10
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	6f 83       	std	Y+7, r22	; 0x07
    23ea:	78 87       	std	Y+8, r23	; 0x08
    23ec:	89 87       	std	Y+9, r24	; 0x09
    23ee:	9a 87       	std	Y+10, r25	; 0x0a
    int intPart = (int)Copy_f32Number;            // Extract the integer part
    23f0:	6f 81       	ldd	r22, Y+7	; 0x07
    23f2:	78 85       	ldd	r23, Y+8	; 0x08
    23f4:	89 85       	ldd	r24, Y+9	; 0x09
    23f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f8:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    float fracPart = Copy_f32Number - (float)intPart; // Extract the fractional part
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2418:	9b 01       	movw	r18, r22
    241a:	ac 01       	movw	r20, r24
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	ab 83       	std	Y+3, r26	; 0x03
    2432:	bc 83       	std	Y+4, r27	; 0x04

    if (Copy_f32Number < 0) // Handle negative numbers
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	9c f4       	brge	.+38     	; 0x2472 <HLCD_VoidLcdWriteFloat+0x9e>
    {
        HLCD_VoidLcdWriteChar('-'); // Write negative sign
    244c:	8d e2       	ldi	r24, 0x2D	; 45
    244e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <HLCD_VoidLcdWriteChar>
        intPart = -intPart;         // Make integer part positive
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	90 95       	com	r25
    2458:	81 95       	neg	r24
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
        fracPart = -fracPart;       // Make fractional part positive
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	ab 81       	ldd	r26, Y+3	; 0x03
    2466:	bc 81       	ldd	r27, Y+4	; 0x04
    2468:	b0 58       	subi	r27, 0x80	; 128
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	ab 83       	std	Y+3, r26	; 0x03
    2470:	bc 83       	std	Y+4, r27	; 0x04
    }

    // Write the integer part
    HLCD_VoidLcdWriteInt(intPart);
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	0e 94 4f 11 	call	0x229e	; 0x229e <HLCD_VoidLcdWriteInt>

    // Write the decimal point
    HLCD_VoidLcdWriteChar('.');
    247a:	8e e2       	ldi	r24, 0x2E	; 46
    247c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <HLCD_VoidLcdWriteChar>

    // Write two digits of the fractional part
    fracPart = fracPart * 100;           // Shift the decimal places to the right
    2480:	69 81       	ldd	r22, Y+1	; 0x01
    2482:	7a 81       	ldd	r23, Y+2	; 0x02
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	48 ec       	ldi	r20, 0xC8	; 200
    248e:	52 e4       	ldi	r21, 0x42	; 66
    2490:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	ab 83       	std	Y+3, r26	; 0x03
    249e:	bc 83       	std	Y+4, r27	; 0x04
    HLCD_VoidLcdWriteInt((int)fracPart); // Write the fractional part as an integer
    24a0:	69 81       	ldd	r22, Y+1	; 0x01
    24a2:	7a 81       	ldd	r23, Y+2	; 0x02
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	0e 94 4f 11 	call	0x229e	; 0x229e <HLCD_VoidLcdWriteInt>
}
    24b4:	2a 96       	adiw	r28, 0x0a	; 10
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <HKPD_u8GetPressedKey>:
static u8 HKPD_AU8ColsPins[4] = {HKPD_C1_PIN, HKPD_C2_PIN, HKPD_C3_PIN, HKPD_C4_PIN};
static u8 HKPD_Au8Keys[4][4] = HKPD_KPD;


u8 HKPD_u8GetPressedKey(u8 *Copy_u8KeyPressed)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	64 97       	sbiw	r28, 0x14	; 20
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	9c 8b       	std	Y+20, r25	; 0x14
    24dc:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8ErrorState = STD_TYPE_NOK;
    24de:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8RowCounter;
    u8 Local_u8ColCounter;
    u8 Local_u8PinValue;
    if (Copy_u8KeyPressed != STD_TYPE_POINTER_NULL)
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	09 f4       	brne	.+2      	; 0x24ea <HKPD_u8GetPressedKey+0x24>
    24e8:	d8 c0       	rjmp	.+432    	; 0x269a <HKPD_u8GetPressedKey+0x1d4>
    {
        Local_u8ErrorState = STD_TYPE_OK;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	89 8b       	std	Y+17, r24	; 0x11
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
    24ee:	18 8a       	std	Y+16, r1	; 0x10
    24f0:	d0 c0       	rjmp	.+416    	; 0x2692 <HKPD_u8GetPressedKey+0x1cc>
        {
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_LOW);
    24f2:	88 89       	ldd	r24, Y+16	; 0x10
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	fc 01       	movw	r30, r24
    24fa:	ef 53       	subi	r30, 0x3F	; 63
    24fc:	fe 4f       	sbci	r31, 0xFE	; 254
    24fe:	90 81       	ld	r25, Z
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	69 2f       	mov	r22, r25
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>
            /* Check Cols*/
            for (Local_u8ColCounter = 0; Local_u8ColCounter < 4; Local_u8ColCounter++)
    250a:	1f 86       	std	Y+15, r1	; 0x0f
    250c:	af c0       	rjmp	.+350    	; 0x266c <HKPD_u8GetPressedKey+0x1a6>
            {
                MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	fc 01       	movw	r30, r24
    2516:	eb 53       	subi	r30, 0x3B	; 59
    2518:	fe 4f       	sbci	r31, 0xFE	; 254
    251a:	90 81       	ld	r25, Z
    251c:	9e 01       	movw	r18, r28
    251e:	2e 5e       	subi	r18, 0xEE	; 238
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	69 2f       	mov	r22, r25
    2526:	a9 01       	movw	r20, r18
    2528:	0e 94 be 0a 	call	0x157c	; 0x157c <MDIO_u8GetPinValue>
                if (Local_u8PinValue == MDIO_LOW)
    252c:	8a 89       	ldd	r24, Y+18	; 0x12
    252e:	88 23       	and	r24, r24
    2530:	09 f0       	breq	.+2      	; 0x2534 <HKPD_u8GetPressedKey+0x6e>
    2532:	99 c0       	rjmp	.+306    	; 0x2666 <HKPD_u8GetPressedKey+0x1a0>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a0 ea       	ldi	r26, 0xA0	; 160
    253a:	b1 e4       	ldi	r27, 0x41	; 65
    253c:	8b 87       	std	Y+11, r24	; 0x0b
    253e:	9c 87       	std	Y+12, r25	; 0x0c
    2540:	ad 87       	std	Y+13, r26	; 0x0d
    2542:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a ef       	ldi	r20, 0xFA	; 250
    2552:	54 e4       	ldi	r21, 0x44	; 68
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	8f 83       	std	Y+7, r24	; 0x07
    255e:	98 87       	std	Y+8, r25	; 0x08
    2560:	a9 87       	std	Y+9, r26	; 0x09
    2562:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	2c f4       	brge	.+10     	; 0x2586 <HKPD_u8GetPressedKey+0xc0>
		__ticks = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <HKPD_u8GetPressedKey+0x13e>
	else if (__tmp > 65535)
    2586:	6f 81       	ldd	r22, Y+7	; 0x07
    2588:	78 85       	ldd	r23, Y+8	; 0x08
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	4c f5       	brge	.+82     	; 0x25f0 <HKPD_u8GetPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <HKPD_u8GetPressedKey+0x120>
    25c8:	88 ec       	ldi	r24, 0xC8	; 200
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <HKPD_u8GetPressedKey+0x10e>
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
    25e8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <HKPD_u8GetPressedKey+0x102>
    25ee:	24 c0       	rjmp	.+72     	; 0x2638 <HKPD_u8GetPressedKey+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	6f 81       	ldd	r22, Y+7	; 0x07
    25f2:	78 85       	ldd	r23, Y+8	; 0x08
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <HKPD_u8GetPressedKey+0x14a>
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <HKPD_u8GetPressedKey+0x172>

                    _delay_ms(20);
                    /*wait the user until switch */
                    while (Local_u8PinValue == MDIO_LOW)
                    {
                        MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
    261a:	8f 85       	ldd	r24, Y+15	; 0x0f
    261c:	88 2f       	mov	r24, r24
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	fc 01       	movw	r30, r24
    2622:	eb 53       	subi	r30, 0x3B	; 59
    2624:	fe 4f       	sbci	r31, 0xFE	; 254
    2626:	90 81       	ld	r25, Z
    2628:	9e 01       	movw	r18, r28
    262a:	2e 5e       	subi	r18, 0xEE	; 238
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	69 2f       	mov	r22, r25
    2632:	a9 01       	movw	r20, r18
    2634:	0e 94 be 0a 	call	0x157c	; 0x157c <MDIO_u8GetPinValue>
                if (Local_u8PinValue == MDIO_LOW)
                {

                    _delay_ms(20);
                    /*wait the user until switch */
                    while (Local_u8PinValue == MDIO_LOW)
    2638:	8a 89       	ldd	r24, Y+18	; 0x12
    263a:	88 23       	and	r24, r24
    263c:	71 f3       	breq	.-36     	; 0x261a <HKPD_u8GetPressedKey+0x154>
                    {
                        MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
                    }
                    *Copy_u8KeyPressed = HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
    263e:	88 89       	ldd	r24, Y+16	; 0x10
    2640:	48 2f       	mov	r20, r24
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	8f 85       	ldd	r24, Y+15	; 0x0f
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	ca 01       	movw	r24, r20
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	82 0f       	add	r24, r18
    2656:	93 1f       	adc	r25, r19
    2658:	fc 01       	movw	r30, r24
    265a:	e7 53       	subi	r30, 0x37	; 55
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	80 81       	ld	r24, Z
    2660:	eb 89       	ldd	r30, Y+19	; 0x13
    2662:	fc 89       	ldd	r31, Y+20	; 0x14
    2664:	80 83       	st	Z, r24
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
        {
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_LOW);
            /* Check Cols*/
            for (Local_u8ColCounter = 0; Local_u8ColCounter < 4; Local_u8ColCounter++)
    2666:	8f 85       	ldd	r24, Y+15	; 0x0f
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	84 30       	cpi	r24, 0x04	; 4
    2670:	08 f4       	brcc	.+2      	; 0x2674 <HKPD_u8GetPressedKey+0x1ae>
    2672:	4d cf       	rjmp	.-358    	; 0x250e <HKPD_u8GetPressedKey+0x48>
                    *Copy_u8KeyPressed = HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
                }

            }
            /*Deactivate Current Row*/
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_HIGH);
    2674:	88 89       	ldd	r24, Y+16	; 0x10
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	fc 01       	movw	r30, r24
    267c:	ef 53       	subi	r30, 0x3F	; 63
    267e:	fe 4f       	sbci	r31, 0xFE	; 254
    2680:	90 81       	ld	r25, Z
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	69 2f       	mov	r22, r25
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>
    u8 Local_u8PinValue;
    if (Copy_u8KeyPressed != STD_TYPE_POINTER_NULL)
    {
        Local_u8ErrorState = STD_TYPE_OK;
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
    268c:	88 89       	ldd	r24, Y+16	; 0x10
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	88 8b       	std	Y+16, r24	; 0x10
    2692:	88 89       	ldd	r24, Y+16	; 0x10
    2694:	84 30       	cpi	r24, 0x04	; 4
    2696:	08 f4       	brcc	.+2      	; 0x269a <HKPD_u8GetPressedKey+0x1d4>
    2698:	2c cf       	rjmp	.-424    	; 0x24f2 <HKPD_u8GetPressedKey+0x2c>
            /*Deactivate Current Row*/
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_HIGH);
        }
    }

    return Local_u8ErrorState;
    269a:	89 89       	ldd	r24, Y+17	; 0x11
}
    269c:	64 96       	adiw	r28, 0x14	; 20
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <main>:

/* Constants */
#define MAX_TRIALS 3
#define PASSWORD 1234 // Define your password as a number

int main(void) {
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	af 97       	sbiw	r28, 0x2f	; 47
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    u8 keyPressed = 0;
    26c2:	1f a6       	std	Y+47, r1	; 0x2f
    u32 enteredPassword = 0; // Buffer for entered password
    26c4:	1e a6       	std	Y+46, r1	; 0x2e
    26c6:	1d a6       	std	Y+45, r1	; 0x2d
    u8 passwordDigitCount = 0; // Count of digits entered
    26c8:	1c a6       	std	Y+44, r1	; 0x2c
    u8 trials = 0; // Count of login attempts
    26ca:	1b a6       	std	Y+43, r1	; 0x2b

    // Initialize the LCD and Keypad
    MDIO_IntialPins();
    26cc:	0e 94 f4 06 	call	0xde8	; 0xde8 <MDIO_IntialPins>
    HLCD_VoidLcdIint();
    26d0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLCD_VoidLcdIint>
    HLCD_VoidLcdClear();
    26d4:	0e 94 c7 10 	call	0x218e	; 0x218e <HLCD_VoidLcdClear>
    26d8:	d7 c1       	rjmp	.+942    	; 0x2a88 <main+0x3da>

    while (trials < MAX_TRIALS) {
        HLCD_VoidLcdClear();
    26da:	0e 94 c7 10 	call	0x218e	; 0x218e <HLCD_VoidLcdClear>
        HLCD_u8WriteStr("Enter Password:");
    26de:	80 e6       	ldi	r24, 0x60	; 96
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
HLCD_VoidSetCurser(HLCD_LINE_2,0);
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	60 e0       	ldi	r22, 0x00	; 0
    26ea:	0e 94 4a 10 	call	0x2094	; 0x2094 <HLCD_VoidSetCurser>
        enteredPassword = 0; // Reset for each attempt
    26ee:	1e a6       	std	Y+46, r1	; 0x2e
    26f0:	1d a6       	std	Y+45, r1	; 0x2d
        passwordDigitCount = 0;
    26f2:	1c a6       	std	Y+44, r1	; 0x2c
    26f4:	c5 c1       	rjmp	.+906    	; 0x2a80 <main+0x3d2>

        while (passwordDigitCount < 5) { // Assuming a 4-digit password
            // Check if a key is pressed
            if (HKPD_u8GetPressedKey(&keyPressed) == STD_TYPE_OK) {
    26f6:	ce 01       	movw	r24, r28
    26f8:	8f 96       	adiw	r24, 0x2f	; 47
    26fa:	0e 94 63 12 	call	0x24c6	; 0x24c6 <HKPD_u8GetPressedKey>
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	09 f0       	breq	.+2      	; 0x2704 <main+0x56>
    2702:	be c1       	rjmp	.+892    	; 0x2a80 <main+0x3d2>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a8 e4       	ldi	r26, 0x48	; 72
    270a:	b3 e4       	ldi	r27, 0x43	; 67
    270c:	8f a3       	std	Y+39, r24	; 0x27
    270e:	98 a7       	std	Y+40, r25	; 0x28
    2710:	a9 a7       	std	Y+41, r26	; 0x29
    2712:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	6f a1       	ldd	r22, Y+39	; 0x27
    2716:	78 a5       	ldd	r23, Y+40	; 0x28
    2718:	89 a5       	ldd	r24, Y+41	; 0x29
    271a:	9a a5       	ldd	r25, Y+42	; 0x2a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8b a3       	std	Y+35, r24	; 0x23
    272e:	9c a3       	std	Y+36, r25	; 0x24
    2730:	ad a3       	std	Y+37, r26	; 0x25
    2732:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2734:	6b a1       	ldd	r22, Y+35	; 0x23
    2736:	7c a1       	ldd	r23, Y+36	; 0x24
    2738:	8d a1       	ldd	r24, Y+37	; 0x25
    273a:	9e a1       	ldd	r25, Y+38	; 0x26
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <main+0xa8>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9a a3       	std	Y+34, r25	; 0x22
    2752:	89 a3       	std	Y+33, r24	; 0x21
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <main+0x126>
	else if (__tmp > 65535)
    2756:	6b a1       	ldd	r22, Y+35	; 0x23
    2758:	7c a1       	ldd	r23, Y+36	; 0x24
    275a:	8d a1       	ldd	r24, Y+37	; 0x25
    275c:	9e a1       	ldd	r25, Y+38	; 0x26
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	6f a1       	ldd	r22, Y+39	; 0x27
    2770:	78 a5       	ldd	r23, Y+40	; 0x28
    2772:	89 a5       	ldd	r24, Y+41	; 0x29
    2774:	9a a5       	ldd	r25, Y+42	; 0x2a
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <main+0x108>
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	98 a3       	std	Y+32, r25	; 0x20
    279e:	8f 8f       	std	Y+31, r24	; 0x1f
    27a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27a2:	98 a1       	ldd	r25, Y+32	; 0x20
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <main+0xf6>
    27a8:	98 a3       	std	Y+32, r25	; 0x20
    27aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	89 a1       	ldd	r24, Y+33	; 0x21
    27ae:	9a a1       	ldd	r25, Y+34	; 0x22
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9a a3       	std	Y+34, r25	; 0x22
    27b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	89 a1       	ldd	r24, Y+33	; 0x21
    27b8:	9a a1       	ldd	r25, Y+34	; 0x22
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <main+0xea>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	6b a1       	ldd	r22, Y+35	; 0x23
    27c2:	7c a1       	ldd	r23, Y+36	; 0x24
    27c4:	8d a1       	ldd	r24, Y+37	; 0x25
    27c6:	9e a1       	ldd	r25, Y+38	; 0x26
    27c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9a a3       	std	Y+34, r25	; 0x22
    27d2:	89 a3       	std	Y+33, r24	; 0x21
    27d4:	89 a1       	ldd	r24, Y+33	; 0x21
    27d6:	9a a1       	ldd	r25, Y+34	; 0x22
    27d8:	9e 8f       	std	Y+30, r25	; 0x1e
    27da:	8d 8f       	std	Y+29, r24	; 0x1d
    27dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <main+0x132>
    27e4:	9e 8f       	std	Y+30, r25	; 0x1e
    27e6:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(200);
                if (keyPressed != HKPD_NO_KEY_PRESSED) {
    27e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ea:	8f 3f       	cpi	r24, 0xFF	; 255
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <main+0x142>
    27ee:	48 c1       	rjmp	.+656    	; 0x2a80 <main+0x3d2>
                    // Handle numeric input (0-9)
                    if (keyPressed >= '0' && keyPressed <= '9') {
    27f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f2:	80 33       	cpi	r24, 0x30	; 48
    27f4:	f0 f0       	brcs	.+60     	; 0x2832 <main+0x184>
    27f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f8:	8a 33       	cpi	r24, 0x3A	; 58
    27fa:	d8 f4       	brcc	.+54     	; 0x2832 <main+0x184>
                        enteredPassword = enteredPassword * 10 + (keyPressed - '0'); // Build the number
    27fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    27fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2800:	9c 01       	movw	r18, r24
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	c9 01       	movw	r24, r18
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	28 0f       	add	r18, r24
    2812:	39 1f       	adc	r19, r25
    2814:	8f a5       	ldd	r24, Y+47	; 0x2f
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	82 0f       	add	r24, r18
    281c:	93 1f       	adc	r25, r19
    281e:	c0 97       	sbiw	r24, 0x30	; 48
    2820:	9e a7       	std	Y+46, r25	; 0x2e
    2822:	8d a7       	std	Y+45, r24	; 0x2d
                        HLCD_VoidLcdWriteChar('*'); // Display * for security
    2824:	8a e2       	ldi	r24, 0x2A	; 42
    2826:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <HLCD_VoidLcdWriteChar>
                        passwordDigitCount++;
    282a:	8c a5       	ldd	r24, Y+44	; 0x2c
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	8c a7       	std	Y+44, r24	; 0x2c
    2830:	b4 c0       	rjmp	.+360    	; 0x299a <main+0x2ec>
                    }
                    // Handle enter key
                    else if (keyPressed == '=') {
    2832:	8f a5       	ldd	r24, Y+47	; 0x2f
    2834:	8d 33       	cpi	r24, 0x3D	; 61
    2836:	09 f0       	breq	.+2      	; 0x283a <main+0x18c>
    2838:	a8 c0       	rjmp	.+336    	; 0x298a <main+0x2dc>
                        // Check password
                        if (enteredPassword == PASSWORD) {
    283a:	8d a5       	ldd	r24, Y+45	; 0x2d
    283c:	9e a5       	ldd	r25, Y+46	; 0x2e
    283e:	24 e0       	ldi	r18, 0x04	; 4
    2840:	82 3d       	cpi	r24, 0xD2	; 210
    2842:	92 07       	cpc	r25, r18
    2844:	a1 f4       	brne	.+40     	; 0x286e <main+0x1c0>
                            HLCD_VoidLcdClear();
    2846:	0e 94 c7 10 	call	0x218e	; 0x218e <HLCD_VoidLcdClear>
                            HLCD_u8WriteStr("Password Correct");
    284a:	80 e7       	ldi	r24, 0x70	; 112
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
                            HLCD_VoidSetCurser(HLCD_LINE_2,0);
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	0e 94 4a 10 	call	0x2094	; 0x2094 <HLCD_VoidSetCurser>
                            HLCD_u8WriteStr("Welcome Ahmed");
    285a:	81 e8       	ldi	r24, 0x81	; 129
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
                            MDIO_u8SetPinValue(MDIO_PORTB,MDIO_PIN_5,MDIO_HIGH);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	65 e0       	ldi	r22, 0x05	; 5
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>
    286c:	ff cf       	rjmp	.-2      	; 0x286c <main+0x1be>
                            while (1); // Infinite loop or redirect to main system
                        } else {
                            trials++;
    286e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	8b a7       	std	Y+43, r24	; 0x2b
                            HLCD_VoidLcdClear();
    2874:	0e 94 c7 10 	call	0x218e	; 0x218e <HLCD_VoidLcdClear>
                            HLCD_u8WriteStr("Wrong Password");
    2878:	8f e8       	ldi	r24, 0x8F	; 143
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
                            HLCD_VoidSetCurser(HLCD_LINE_2,0);
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	0e 94 4a 10 	call	0x2094	; 0x2094 <HLCD_VoidSetCurser>
                            HLCD_VoidLcdWriteInt(MAX_TRIALS - trials);
    2888:	8b a5       	ldd	r24, Y+43	; 0x2b
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	82 1b       	sub	r24, r18
    2894:	93 0b       	sbc	r25, r19
    2896:	0e 94 4f 11 	call	0x229e	; 0x229e <HLCD_VoidLcdWriteInt>
                            HLCD_u8WriteStr(" Trials left");
    289a:	8e e9       	ldi	r24, 0x9E	; 158
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	aa ef       	ldi	r26, 0xFA	; 250
    28a8:	b4 e4       	ldi	r27, 0x44	; 68
    28aa:	89 8f       	std	Y+25, r24	; 0x19
    28ac:	9a 8f       	std	Y+26, r25	; 0x1a
    28ae:	ab 8f       	std	Y+27, r26	; 0x1b
    28b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b2:	69 8d       	ldd	r22, Y+25	; 0x19
    28b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a ef       	ldi	r20, 0xFA	; 250
    28c0:	54 e4       	ldi	r21, 0x44	; 68
    28c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8d 8b       	std	Y+21, r24	; 0x15
    28cc:	9e 8b       	std	Y+22, r25	; 0x16
    28ce:	af 8b       	std	Y+23, r26	; 0x17
    28d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <main+0x246>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9c 8b       	std	Y+20, r25	; 0x14
    28f0:	8b 8b       	std	Y+19, r24	; 0x13
    28f2:	3f c0       	rjmp	.+126    	; 0x2972 <main+0x2c4>
	else if (__tmp > 65535)
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	3f ef       	ldi	r19, 0xFF	; 255
    2900:	4f e7       	ldi	r20, 0x7F	; 127
    2902:	57 e4       	ldi	r21, 0x47	; 71
    2904:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2908:	18 16       	cp	r1, r24
    290a:	4c f5       	brge	.+82     	; 0x295e <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290c:	69 8d       	ldd	r22, Y+25	; 0x19
    290e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e2       	ldi	r20, 0x20	; 32
    291a:	51 e4       	ldi	r21, 0x41	; 65
    291c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <main+0x2a6>
    2936:	88 ec       	ldi	r24, 0xC8	; 200
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9a 8b       	std	Y+18, r25	; 0x12
    293c:	89 8b       	std	Y+17, r24	; 0x11
    293e:	89 89       	ldd	r24, Y+17	; 0x11
    2940:	9a 89       	ldd	r25, Y+18	; 0x12
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <main+0x294>
    2946:	9a 8b       	std	Y+18, r25	; 0x12
    2948:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	8b 89       	ldd	r24, Y+19	; 0x13
    294c:	9c 89       	ldd	r25, Y+20	; 0x14
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	9c 8b       	std	Y+20, r25	; 0x14
    2952:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	69 f7       	brne	.-38     	; 0x2936 <main+0x288>
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <main+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295e:	6d 89       	ldd	r22, Y+21	; 0x15
    2960:	7e 89       	ldd	r23, Y+22	; 0x16
    2962:	8f 89       	ldd	r24, Y+23	; 0x17
    2964:	98 8d       	ldd	r25, Y+24	; 0x18
    2966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	98 8b       	std	Y+16, r25	; 0x10
    2978:	8f 87       	std	Y+15, r24	; 0x0f
    297a:	8f 85       	ldd	r24, Y+15	; 0x0f
    297c:	98 89       	ldd	r25, Y+16	; 0x10
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <main+0x2d0>
    2982:	98 8b       	std	Y+16, r25	; 0x10
    2984:	8f 87       	std	Y+15, r24	; 0x0f
                            _delay_ms(2000); // Delay to show message
                            keyPressed=0;
    2986:	1f a6       	std	Y+47, r1	; 0x2f
    2988:	7f c0       	rjmp	.+254    	; 0x2a88 <main+0x3da>
                            break; // Break to reset for the next trial
                        }
                    }
                    // Handle clear key ('C')
                    else if (keyPressed == '%') {
    298a:	8f a5       	ldd	r24, Y+47	; 0x2f
    298c:	85 32       	cpi	r24, 0x25	; 37
    298e:	29 f4       	brne	.+10     	; 0x299a <main+0x2ec>
                        HLCD_VoidLcdClear();
    2990:	0e 94 c7 10 	call	0x218e	; 0x218e <HLCD_VoidLcdClear>
                        enteredPassword = 0; // Reset entered password
    2994:	1e a6       	std	Y+46, r1	; 0x2e
    2996:	1d a6       	std	Y+45, r1	; 0x2d
                        passwordDigitCount = 0; // Reset digit count
    2998:	1c a6       	std	Y+44, r1	; 0x2c
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e2       	ldi	r26, 0x20	; 32
    29a0:	b1 e4       	ldi	r27, 0x41	; 65
    29a2:	8b 87       	std	Y+11, r24	; 0x0b
    29a4:	9c 87       	std	Y+12, r25	; 0x0c
    29a6:	ad 87       	std	Y+13, r26	; 0x0d
    29a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8f 83       	std	Y+7, r24	; 0x07
    29c4:	98 87       	std	Y+8, r25	; 0x08
    29c6:	a9 87       	std	Y+9, r26	; 0x09
    29c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <main+0x33e>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <main+0x3bc>
	else if (__tmp > 65535)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <main+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <main+0x39e>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <main+0x38c>
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <main+0x380>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <main+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <main+0x3c8>
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
                    }

                    _delay_ms(10); // Small delay for debouncing
                    keyPressed = 0;
    2a7e:	1f a6       	std	Y+47, r1	; 0x2f
        HLCD_u8WriteStr("Enter Password:");
HLCD_VoidSetCurser(HLCD_LINE_2,0);
        enteredPassword = 0; // Reset for each attempt
        passwordDigitCount = 0;

        while (passwordDigitCount < 5) { // Assuming a 4-digit password
    2a80:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a82:	85 30       	cpi	r24, 0x05	; 5
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <main+0x3da>
    2a86:	37 ce       	rjmp	.-914    	; 0x26f6 <main+0x48>
    // Initialize the LCD and Keypad
    MDIO_IntialPins();
    HLCD_VoidLcdIint();
    HLCD_VoidLcdClear();

    while (trials < MAX_TRIALS) {
    2a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a8a:	83 30       	cpi	r24, 0x03	; 3
    2a8c:	08 f4       	brcc	.+2      	; 0x2a90 <main+0x3e2>
    2a8e:	25 ce       	rjmp	.-950    	; 0x26da <main+0x2c>
            }
        }
    }

    // After MAX_TRIALS
    HLCD_VoidLcdClear();
    2a90:	0e 94 c7 10 	call	0x218e	; 0x218e <HLCD_VoidLcdClear>
    HLCD_u8WriteStr("Access Denied");
    2a94:	8b ea       	ldi	r24, 0xAB	; 171
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 79 10 	call	0x20f2	; 0x20f2 <HLCD_u8WriteStr>
    MDIO_u8SetPinValue(MDIO_PORTB,MDIO_PIN_7,MDIO_HIGH);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	67 e0       	ldi	r22, 0x07	; 7
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	0e 94 6d 09 	call	0x12da	; 0x12da <MDIO_u8SetPinValue>
    2aa6:	ff cf       	rjmp	.-2      	; 0x2aa6 <main+0x3f8>

00002aa8 <__divmodhi4>:
    2aa8:	97 fb       	bst	r25, 7
    2aaa:	09 2e       	mov	r0, r25
    2aac:	07 26       	eor	r0, r23
    2aae:	0a d0       	rcall	.+20     	; 0x2ac4 <__divmodhi4_neg1>
    2ab0:	77 fd       	sbrc	r23, 7
    2ab2:	04 d0       	rcall	.+8      	; 0x2abc <__divmodhi4_neg2>
    2ab4:	0c d0       	rcall	.+24     	; 0x2ace <__udivmodhi4>
    2ab6:	06 d0       	rcall	.+12     	; 0x2ac4 <__divmodhi4_neg1>
    2ab8:	00 20       	and	r0, r0
    2aba:	1a f4       	brpl	.+6      	; 0x2ac2 <__divmodhi4_exit>

00002abc <__divmodhi4_neg2>:
    2abc:	70 95       	com	r23
    2abe:	61 95       	neg	r22
    2ac0:	7f 4f       	sbci	r23, 0xFF	; 255

00002ac2 <__divmodhi4_exit>:
    2ac2:	08 95       	ret

00002ac4 <__divmodhi4_neg1>:
    2ac4:	f6 f7       	brtc	.-4      	; 0x2ac2 <__divmodhi4_exit>
    2ac6:	90 95       	com	r25
    2ac8:	81 95       	neg	r24
    2aca:	9f 4f       	sbci	r25, 0xFF	; 255
    2acc:	08 95       	ret

00002ace <__udivmodhi4>:
    2ace:	aa 1b       	sub	r26, r26
    2ad0:	bb 1b       	sub	r27, r27
    2ad2:	51 e1       	ldi	r21, 0x11	; 17
    2ad4:	07 c0       	rjmp	.+14     	; 0x2ae4 <__udivmodhi4_ep>

00002ad6 <__udivmodhi4_loop>:
    2ad6:	aa 1f       	adc	r26, r26
    2ad8:	bb 1f       	adc	r27, r27
    2ada:	a6 17       	cp	r26, r22
    2adc:	b7 07       	cpc	r27, r23
    2ade:	10 f0       	brcs	.+4      	; 0x2ae4 <__udivmodhi4_ep>
    2ae0:	a6 1b       	sub	r26, r22
    2ae2:	b7 0b       	sbc	r27, r23

00002ae4 <__udivmodhi4_ep>:
    2ae4:	88 1f       	adc	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	5a 95       	dec	r21
    2aea:	a9 f7       	brne	.-22     	; 0x2ad6 <__udivmodhi4_loop>
    2aec:	80 95       	com	r24
    2aee:	90 95       	com	r25
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	08 95       	ret

00002af6 <__prologue_saves__>:
    2af6:	2f 92       	push	r2
    2af8:	3f 92       	push	r3
    2afa:	4f 92       	push	r4
    2afc:	5f 92       	push	r5
    2afe:	6f 92       	push	r6
    2b00:	7f 92       	push	r7
    2b02:	8f 92       	push	r8
    2b04:	9f 92       	push	r9
    2b06:	af 92       	push	r10
    2b08:	bf 92       	push	r11
    2b0a:	cf 92       	push	r12
    2b0c:	df 92       	push	r13
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	ca 1b       	sub	r28, r26
    2b20:	db 0b       	sbc	r29, r27
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	09 94       	ijmp

00002b2e <__epilogue_restores__>:
    2b2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b30:	39 88       	ldd	r3, Y+17	; 0x11
    2b32:	48 88       	ldd	r4, Y+16	; 0x10
    2b34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b40:	b9 84       	ldd	r11, Y+9	; 0x09
    2b42:	c8 84       	ldd	r12, Y+8	; 0x08
    2b44:	df 80       	ldd	r13, Y+7	; 0x07
    2b46:	ee 80       	ldd	r14, Y+6	; 0x06
    2b48:	fd 80       	ldd	r15, Y+5	; 0x05
    2b4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b50:	b9 81       	ldd	r27, Y+1	; 0x01
    2b52:	ce 0f       	add	r28, r30
    2b54:	d1 1d       	adc	r29, r1
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	ed 01       	movw	r28, r26
    2b62:	08 95       	ret

00002b64 <_exit>:
    2b64:	f8 94       	cli

00002b66 <__stop_program>:
    2b66:	ff cf       	rjmp	.-2      	; 0x2b66 <__stop_program>
